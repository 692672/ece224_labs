
lab1_phase1.elf:     file format elf32-littlenios2
lab1_phase1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00004074 memsz 0x00004074 flags r-x
    LOAD off    0x00005094 vaddr 0x02004094 paddr 0x020057f0 align 2**12
         filesz 0x0000175c memsz 0x0000175c flags rw-
    LOAD off    0x00006f4c vaddr 0x02006f4c paddr 0x02006f4c align 2**12
         filesz 0x00000000 memsz 0x000002c0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003c10  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d0  02003dc4  02003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000175c  02004094  020057f0  00005094  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002c0  02006f4c  02006f4c  00006f4c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000067f0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000658  00000000  00000000  00006818  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000009e8  00000000  00000000  00006e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c071  00000000  00000000  00007858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d3d  00000000  00000000  000138c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000083e4  00000000  00000000  00016606  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b78  00000000  00000000  0001e9ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d8e  00000000  00000000  0001f564  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000133a  00000000  00000000  000202f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0002162c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00021680  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002368a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0002368d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00023692  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00023693  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00023697  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0002369b  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0002369f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000236aa  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000236b5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  000236c0  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000009  00000000  00000000  000236cd  2**0
                  CONTENTS, READONLY
 28 .jdi          00004111  00000000  00000000  000236d6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
02003dc4 l    d  .rodata	00000000 .rodata
02004094 l    d  .rwdata	00000000 .rwdata
02006f4c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab1_phase1.c
020001f0 l     F .text	0000011c TIMER_ISR
0200030c l     F .text	00000090 button_ISR
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0200066c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02004094 l     O .rwdata	00001060 jtag_uart_0
020050f4 l     O .rwdata	00000120 lcd_display
020007e8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02000a28 l     F .text	00000228 altera_avalon_jtag_uart_irq
02000c50 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
020057c0 l     O .rwdata	00000004 colstart
020012cc l     F .text	000000b8 lcd_write_command
02001384 l     F .text	000000d4 lcd_write_data
02001458 l     F .text	000000d8 lcd_clear_screen
02001530 l     F .text	00000214 lcd_repaint_screen
02001744 l     F .text	000000e0 lcd_scroll_up
02001824 l     F .text	000002e4 lcd_handle_escape
02002044 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020022a4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
020025f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02002674 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02002754 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02002b78 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02002cc8 l     F .text	000000f8 alt_file_locked
02002f4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
02003f0d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
020053bc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02003a28 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
02003bdc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
02003d60 l     F .text	00000040 alt_sim_halt
020006d8 g     F .text	0000006c alt_main
02006f7c g     O .bss	00000100 alt_irq
020057f0 g       *ABS*	00000000 __flash_rwdata_start
02006f4d g     O .bss	00000001 switch_SSeg
02006f5c g     O .bss	00000004 sSState
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02006f78 g     O .bss	00000004 errno
02006f68 g     O .bss	00000004 alt_argv
0200d7bc g       *ABS*	00000000 _gp
020031c8 g     F .text	00000030 usleep
02006f54 g     O .bss	00000004 counterSEG
0200523c g     O .rwdata	00000180 alt_fd_list
02003374 g     F .text	00000094 alt_find_dev
02003748 g     F .text	000000a0 memcpy
02002c50 g     F .text	00000078 alt_io_redirect
02003dc4 g       *ABS*	00000000 __DTOR_END__
020031f8 g     F .text	00000020 altera_nios2_irq_init
02000e68 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02003d18 g     F .text	00000008 __udivsi3
020035f8 g     F .text	00000090 alt_icache_flush
020057d4 g     O .rwdata	00000004 alt_max_fd
0200042c g     F .text	000001c0 alt_irq_register
020057ec g     O .rwdata	00000004 _global_impure_ptr
0200720c g       *ABS*	00000000 __bss_end
02002a80 g     F .text	000000f8 alt_iic_isr_register
020030bc g     F .text	0000010c alt_tick
020057e4 g     O .rwdata	00000004 __ctype_ptr
02002a38 g     F .text	00000048 alt_ic_irq_enabled
02003024 g     F .text	00000098 alt_alarm_stop
02006f60 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
02005214 g     O .rwdata	00000028 alt_dev_null
02006f58 g     O .bss	00000004 ledState
02002658 g     F .text	0000001c alt_dcache_flush_all
020057f0 g       *ABS*	00000000 __ram_rwdata_end
020057cc g     O .rwdata	00000008 alt_dev_list
02004094 g       *ABS*	00000000 __ram_rodata_end
02003d20 g     F .text	00000008 __umodsi3
0200720c g       *ABS*	00000000 end
02001b08 g     F .text	0000053c altera_avalon_lcd_16207_write
02000968 g     F .text	000000c0 altera_avalon_jtag_uart_init
02003dc0 g       *ABS*	00000000 __CTOR_LIST__
02800000 g       *ABS*	00000000 __alt_stack_pointer
02002314 g     F .text	00000090 alt_avalon_timer_sc_init
0200108c g     F .text	00000240 altera_avalon_jtag_uart_write
02003a2c g     F .text	000001b0 __call_exitprocs
020001b4 g     F .text	0000003c _start
02006f70 g     O .bss	00000004 _alt_tick_rate
02006f74 g     O .bss	00000004 _alt_nticks
02000778 g     F .text	00000070 alt_sys_init
020038f4 g     F .text	00000134 __register_exitproc
02000d00 g     F .text	00000074 altera_avalon_jtag_uart_close
02003d28 g     F .text	00000038 __mulsi3
02004094 g       *ABS*	00000000 __ram_rwdata_start
02003dc4 g       *ABS*	00000000 __ram_rodata_start
02000820 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02003528 g     F .text	000000d0 alt_get_fd
02003218 g     F .text	0000015c alt_busy_sleep
020036d4 g     F .text	00000074 memcmp
020008d0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0200720c g       *ABS*	00000000 __alt_stack_base
02000918 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02003408 g     F .text	00000120 alt_find_file
020026a0 g     F .text	000000b4 alt_dev_llist_insert
02006f50 g     O .bss	00000004 counterLED
02006f4c g       *ABS*	00000000 __bss_start
020037e8 g     F .text	00000098 memset
0200039c g     F .text	00000090 main
02006f6c g     O .bss	00000004 alt_envp
02000878 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02002110 g     F .text	0000013c altera_avalon_lcd_16207_init
0200707c g     O .bss	00000190 _atexit0
020057d8 g     O .rwdata	00000004 alt_errno
02003c58 g     F .text	00000060 __divsi3
02003dc4 g       *ABS*	00000000 __CTOR_END__
02003dc4 g       *ABS*	00000000 __flash_rodata_start
02003dc4 g       *ABS*	00000000 __DTOR_LIST__
02000744 g     F .text	00000034 alt_irq_init
02002fac g     F .text	00000078 alt_release_fd
02003688 g     F .text	00000014 atexit
020057e8 g     O .rwdata	00000004 _impure_ptr
02006f64 g     O .bss	00000004 alt_argc
02002818 g     F .text	00000064 _do_dtors
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
02000020 g       .exceptions	00000000 alt_irq_entry
0200224c g     F .text	00000058 altera_avalon_lcd_16207_write_fd
020057c4 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
020028ac g     F .text	00000050 alt_ic_isr_register
020057f0 g       *ABS*	00000000 _edata
0200720c g       *ABS*	00000000 _end
020001b4 g       *ABS*	00000000 __ram_exceptions_end
02000d74 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02002998 g     F .text	000000a0 alt_ic_irq_disable
0200369c g     F .text	00000038 exit
02003cb8 g     F .text	00000060 __modsi3
02800000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02003e0c g     O .rodata	00000101 _ctype_
02003da0 g     F .text	00000020 _exit
020023a4 g     F .text	00000154 alt_alarm_start
02003880 g     F .text	00000074 strlen
02002dc0 g     F .text	0000018c open
0200287c g     F .text	00000030 alt_icache_flush_all
020057bc g     O .rwdata	00000004 alt_priority_mask
020028fc g     F .text	0000009c alt_ic_irq_enable
020057dc g     O .rwdata	00000008 alt_alarm_list
020027b4 g     F .text	00000064 _do_ctors
020024f8 g     F .text	00000100 close
02006f4c g     O .bss	00000001 switch_LED
020005ec g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406d14 	ori	at,at,436
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram_0-0x2000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08034 	movhi	r3,512
 2000134:	18dbdf04 	addi	r3,r3,28540
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08034 	movhi	r3,512
 200014c:	18dbdf04 	addi	r3,r3,28540
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b4:	06c0a034 	movhi	sp,640
    ori sp, sp, %lo(__alt_stack_pointer)
 20001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001bc:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001c0:	d6b5ef14 	ori	gp,gp,55228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c4:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001c8:	109bd314 	ori	r2,r2,28492

    movhi r3, %hi(__bss_end)
 20001cc:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001d0:	18dc8314 	ori	r3,r3,29196

    beq r2, r3, 1f
 20001d4:	10c00326 	beq	r2,r3,20001e4 <_start+0x30>

0:
    stw zero, (r2)
 20001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e0:	10fffd36 	bltu	r2,r3,20001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e4:	20005ec0 	call	20005ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001e8:	20006d80 	call	20006d8 <alt_main>

020001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001ec:	003fff06 	br	20001ec <alt_after_alt_main>

020001f0 <TIMER_ISR>:
volatile int counterLED = 0;
volatile int counterSEG = 0;
volatile int ledState = 0;
volatile int sSState = 0;

static void TIMER_ISR(void* context, alt_u32 id) {
 20001f0:	defffd04 	addi	sp,sp,-12
 20001f4:	df000215 	stw	fp,8(sp)
 20001f8:	df000204 	addi	fp,sp,8
 20001fc:	e13ffe15 	stw	r4,-8(fp)
 2000200:	e17fff15 	stw	r5,-4(fp)
	IOWR(TIMER_0_BASE, 0, 0x0);
 2000204:	00801804 	movi	r2,96
 2000208:	10000035 	stwio	zero,0(r2)

	if (ledState == 1) {
 200020c:	d0a5e717 	ldw	r2,-26724(gp)
 2000210:	10800058 	cmpnei	r2,r2,1
 2000214:	1000131e 	bne	r2,zero,2000264 <TIMER_ISR+0x74>
		if (switch_LED & 0x1) {
 2000218:	d0a5e403 	ldbu	r2,-26736(gp)
 200021c:	10803fcc 	andi	r2,r2,255
 2000220:	1080004c 	andi	r2,r2,1
 2000224:	10803fcc 	andi	r2,r2,255
 2000228:	1005003a 	cmpeq	r2,r2,zero
 200022c:	1000041e 	bne	r2,zero,2000240 <TIMER_ISR+0x50>
			IOWR(LED_PIO_BASE, 0, 0x1);
 2000230:	00c00804 	movi	r3,32
 2000234:	00800044 	movi	r2,1
 2000238:	18800035 	stwio	r2,0(r3)
 200023c:	00000206 	br	2000248 <TIMER_ISR+0x58>
		} else {
			IOWR(LED_PIO_BASE, 0, 0x0);
 2000240:	00800804 	movi	r2,32
 2000244:	10000035 	stwio	zero,0(r2)
		}
		counterLED++;
 2000248:	d0a5e517 	ldw	r2,-26732(gp)
 200024c:	10800044 	addi	r2,r2,1
 2000250:	d0a5e515 	stw	r2,-26732(gp)
		switch_LED >>= 1;
 2000254:	d0a5e403 	ldbu	r2,-26736(gp)
 2000258:	10803fcc 	andi	r2,r2,255
 200025c:	1004d07a 	srli	r2,r2,1
 2000260:	d0a5e405 	stb	r2,-26736(gp)
	}

	if (sSState == 1) {
 2000264:	d0a5e817 	ldw	r2,-26720(gp)
 2000268:	10800058 	cmpnei	r2,r2,1
 200026c:	1000141e 	bne	r2,zero,20002c0 <TIMER_ISR+0xd0>
		if (switch_SSeg & 0x1) {
 2000270:	d0a5e443 	ldbu	r2,-26735(gp)
 2000274:	10803fcc 	andi	r2,r2,255
 2000278:	1080004c 	andi	r2,r2,1
 200027c:	10803fcc 	andi	r2,r2,255
 2000280:	1005003a 	cmpeq	r2,r2,zero
 2000284:	1000041e 	bne	r2,zero,2000298 <TIMER_ISR+0xa8>
			IOWR(SEVEN_SEG_PIO_BASE,0, 0xFFCF);
 2000288:	00c00c04 	movi	r3,48
 200028c:	00bff3d4 	movui	r2,65487
 2000290:	18800035 	stwio	r2,0(r3)
 2000294:	00000306 	br	20002a4 <TIMER_ISR+0xb4>
		} else {
			IOWR(SEVEN_SEG_PIO_BASE,0, 0xFF81);
 2000298:	00c00c04 	movi	r3,48
 200029c:	00bfe054 	movui	r2,65409
 20002a0:	18800035 	stwio	r2,0(r3)
		}
		counterSEG++;
 20002a4:	d0a5e617 	ldw	r2,-26728(gp)
 20002a8:	10800044 	addi	r2,r2,1
 20002ac:	d0a5e615 	stw	r2,-26728(gp)
		switch_SSeg >>= 1;
 20002b0:	d0a5e443 	ldbu	r2,-26735(gp)
 20002b4:	10803fcc 	andi	r2,r2,255
 20002b8:	1004d07a 	srli	r2,r2,1
 20002bc:	d0a5e445 	stb	r2,-26735(gp)
	}

	if (counterLED == 9) {
 20002c0:	d0a5e517 	ldw	r2,-26732(gp)
 20002c4:	10800258 	cmpnei	r2,r2,9
 20002c8:	1000041e 	bne	r2,zero,20002dc <TIMER_ISR+0xec>
		counterLED = 0;
 20002cc:	d025e515 	stw	zero,-26732(gp)
		ledState = 0;
 20002d0:	d025e715 	stw	zero,-26724(gp)
		IOWR(LED_PIO_BASE,0, 0x0);
 20002d4:	00800804 	movi	r2,32
 20002d8:	10000035 	stwio	zero,0(r2)
	}

	if (counterSEG == 9) {
 20002dc:	d0a5e617 	ldw	r2,-26728(gp)
 20002e0:	10800258 	cmpnei	r2,r2,9
 20002e4:	1000051e 	bne	r2,zero,20002fc <TIMER_ISR+0x10c>
		counterSEG = 0;
 20002e8:	d025e615 	stw	zero,-26728(gp)
		sSState = 0;
 20002ec:	d025e815 	stw	zero,-26720(gp)
		IOWR(SEVEN_SEG_PIO_BASE,0, 0xFFFF);
 20002f0:	00c00c04 	movi	r3,48
 20002f4:	00bfffd4 	movui	r2,65535
 20002f8:	18800035 	stwio	r2,0(r3)
	}
}
 20002fc:	e037883a 	mov	sp,fp
 2000300:	df000017 	ldw	fp,0(sp)
 2000304:	dec00104 	addi	sp,sp,4
 2000308:	f800283a 	ret

0200030c <button_ISR>:

static void button_ISR(void* context, alt_u32 id) {
 200030c:	defffc04 	addi	sp,sp,-16
 2000310:	df000315 	stw	fp,12(sp)
 2000314:	df000304 	addi	fp,sp,12
 2000318:	e13ffe15 	stw	r4,-8(fp)
 200031c:	e17fff15 	stw	r5,-4(fp)
	//Only need the first two buttons.
	alt_u8 buttons = IORD(BUTTON_PIO_BASE, 3) & 0x3;
 2000320:	00801304 	movi	r2,76
 2000324:	10800037 	ldwio	r2,0(r2)
 2000328:	108000cc 	andi	r2,r2,3
 200032c:	e0bffd05 	stb	r2,-12(fp)

	//If switch_LED was pressed
	if (buttons & 0x1) {
 2000330:	e0bffd03 	ldbu	r2,-12(fp)
 2000334:	1080004c 	andi	r2,r2,1
 2000338:	10803fcc 	andi	r2,r2,255
 200033c:	1005003a 	cmpeq	r2,r2,zero
 2000340:	1000061e 	bne	r2,zero,200035c <button_ISR+0x50>
		switch_LED = IORD(SWITCH_PIO_BASE,0);
 2000344:	00803404 	movi	r2,208
 2000348:	10800037 	ldwio	r2,0(r2)
 200034c:	d0a5e405 	stb	r2,-26736(gp)
		counterLED = 0;
 2000350:	d025e515 	stw	zero,-26732(gp)
		ledState = 1;
 2000354:	00800044 	movi	r2,1
 2000358:	d0a5e715 	stw	r2,-26724(gp)
	}

	//If switch_SSeg was pressed
	if (buttons & 0x2) {
 200035c:	e0bffd03 	ldbu	r2,-12(fp)
 2000360:	1080008c 	andi	r2,r2,2
 2000364:	1005003a 	cmpeq	r2,r2,zero
 2000368:	1000061e 	bne	r2,zero,2000384 <button_ISR+0x78>
		switch_SSeg = IORD(SWITCH_PIO_BASE,0);
 200036c:	00803404 	movi	r2,208
 2000370:	10800037 	ldwio	r2,0(r2)
 2000374:	d0a5e445 	stb	r2,-26735(gp)
		counterSEG = 0;
 2000378:	d025e615 	stw	zero,-26728(gp)
		sSState = 1;
 200037c:	00800044 	movi	r2,1
 2000380:	d0a5e815 	stw	r2,-26720(gp)
	}

	// Clear interrupt flag
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
 2000384:	00801304 	movi	r2,76
 2000388:	10000035 	stwio	zero,0(r2)
}
 200038c:	e037883a 	mov	sp,fp
 2000390:	df000017 	ldw	fp,0(sp)
 2000394:	dec00104 	addi	sp,sp,4
 2000398:	f800283a 	ret

0200039c <main>:

int main(void) {
 200039c:	defffe04 	addi	sp,sp,-8
 20003a0:	dfc00115 	stw	ra,4(sp)
 20003a4:	df000015 	stw	fp,0(sp)
 20003a8:	d839883a 	mov	fp,sp
	//Registering the timer interrupt request
	alt_irq_register(TIMER_0_IRQ, (void*) 0, TIMER_ISR);
 20003ac:	01000084 	movi	r4,2
 20003b0:	000b883a 	mov	r5,zero
 20003b4:	01808034 	movhi	r6,512
 20003b8:	31807c04 	addi	r6,r6,496
 20003bc:	200042c0 	call	200042c <alt_irq_register>

	//Establishing the timer's period
	IOWR(TIMER_0_BASE, 2, (alt_u16)TIMER_0_FREQ);
 20003c0:	00c01a04 	movi	r3,104
 20003c4:	00bc2014 	movui	r2,61568
 20003c8:	18800035 	stwio	r2,0(r3)
	IOWR(TIMER_0_BASE, 3, (alt_u16)(TIMER_0_FREQ >> 16));
 20003cc:	00c01b04 	movi	r3,108
 20003d0:	0080be84 	movi	r2,762
 20003d4:	18800035 	stwio	r2,0(r3)

	//Clear the timer bit in register and initialise
	IOWR(TIMER_0_BASE, 0, 0x0);
 20003d8:	00801804 	movi	r2,96
 20003dc:	10000035 	stwio	zero,0(r2)
	IOWR(TIMER_0_BASE, 1, 0x7);
 20003e0:	00c01904 	movi	r3,100
 20003e4:	008001c4 	movi	r2,7
 20003e8:	18800035 	stwio	r2,0(r3)

	//Initialise the interrupt request
	alt_irq_register(BUTTON_PIO_IRQ, (void*) 0, button_ISR);
 20003ec:	01000044 	movi	r4,1
 20003f0:	000b883a 	mov	r5,zero
 20003f4:	01808034 	movhi	r6,512
 20003f8:	3180c304 	addi	r6,r6,780
 20003fc:	200042c0 	call	200042c <alt_irq_register>

	IOWR(BUTTON_PIO_BASE, 2, 0xF);
 2000400:	00c01204 	movi	r3,72
 2000404:	008003c4 	movi	r2,15
 2000408:	18800035 	stwio	r2,0(r3)
	IOWR(BUTTON_PIO_BASE, 3, 0x0);
 200040c:	00801304 	movi	r2,76
 2000410:	10000035 	stwio	zero,0(r2)
	IOWR(LED_PIO_BASE, 0, 0x00);
 2000414:	00800804 	movi	r2,32
 2000418:	10000035 	stwio	zero,0(r2)
	IOWR(SEVEN_SEG_PIO_BASE,0, 0xffff);
 200041c:	00c00c04 	movi	r3,48
 2000420:	00bfffd4 	movui	r2,65535
 2000424:	18800035 	stwio	r2,0(r3)

	while (1) {	}
 2000428:	003fff06 	br	2000428 <main+0x8c>

0200042c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 200042c:	deffef04 	addi	sp,sp,-68
 2000430:	df001015 	stw	fp,64(sp)
 2000434:	df001004 	addi	fp,sp,64
 2000438:	e13ffc15 	stw	r4,-16(fp)
 200043c:	e17ffd15 	stw	r5,-12(fp)
 2000440:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 2000444:	00bffa84 	movi	r2,-22
 2000448:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200044c:	e0bffc17 	ldw	r2,-16(fp)
 2000450:	10800828 	cmpgeui	r2,r2,32
 2000454:	1000601e 	bne	r2,zero,20005d8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000458:	0005303a 	rdctl	r2,status
 200045c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000460:	e0fff917 	ldw	r3,-28(fp)
 2000464:	00bfff84 	movi	r2,-2
 2000468:	1884703a 	and	r2,r3,r2
 200046c:	1001703a 	wrctl	status,r2
  
  return context;
 2000470:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 2000474:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 2000478:	e0bffc17 	ldw	r2,-16(fp)
 200047c:	00c08034 	movhi	r3,512
 2000480:	18dbdf04 	addi	r3,r3,28540
 2000484:	100490fa 	slli	r2,r2,3
 2000488:	10c7883a 	add	r3,r2,r3
 200048c:	e0bffe17 	ldw	r2,-8(fp)
 2000490:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 2000494:	e0bffc17 	ldw	r2,-16(fp)
 2000498:	00c08034 	movhi	r3,512
 200049c:	18dbdf04 	addi	r3,r3,28540
 20004a0:	100490fa 	slli	r2,r2,3
 20004a4:	10c5883a 	add	r2,r2,r3
 20004a8:	10c00104 	addi	r3,r2,4
 20004ac:	e0bffd17 	ldw	r2,-12(fp)
 20004b0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 20004b4:	e0bffe17 	ldw	r2,-8(fp)
 20004b8:	1005003a 	cmpeq	r2,r2,zero
 20004bc:	1000201e 	bne	r2,zero,2000540 <alt_irq_register+0x114>
 20004c0:	e0bffc17 	ldw	r2,-16(fp)
 20004c4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20004c8:	0005303a 	rdctl	r2,status
 20004cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20004d0:	e0fff617 	ldw	r3,-40(fp)
 20004d4:	00bfff84 	movi	r2,-2
 20004d8:	1884703a 	and	r2,r3,r2
 20004dc:	1001703a 	wrctl	status,r2
  
  return context;
 20004e0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20004e4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 20004e8:	e0fff717 	ldw	r3,-36(fp)
 20004ec:	00800044 	movi	r2,1
 20004f0:	10c4983a 	sll	r2,r2,r3
 20004f4:	1007883a 	mov	r3,r2
 20004f8:	00808034 	movhi	r2,512
 20004fc:	109bd804 	addi	r2,r2,28512
 2000500:	10800017 	ldw	r2,0(r2)
 2000504:	1886b03a 	or	r3,r3,r2
 2000508:	00808034 	movhi	r2,512
 200050c:	109bd804 	addi	r2,r2,28512
 2000510:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2000514:	00808034 	movhi	r2,512
 2000518:	109bd804 	addi	r2,r2,28512
 200051c:	10800017 	ldw	r2,0(r2)
 2000520:	100170fa 	wrctl	ienable,r2
 2000524:	e0bff817 	ldw	r2,-32(fp)
 2000528:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200052c:	e0bff517 	ldw	r2,-44(fp)
 2000530:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2000534:	0005883a 	mov	r2,zero
 2000538:	e0bfff15 	stw	r2,-4(fp)
 200053c:	00002006 	br	20005c0 <alt_irq_register+0x194>
 2000540:	e0bffc17 	ldw	r2,-16(fp)
 2000544:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000548:	0005303a 	rdctl	r2,status
 200054c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000550:	e0fff217 	ldw	r3,-56(fp)
 2000554:	00bfff84 	movi	r2,-2
 2000558:	1884703a 	and	r2,r3,r2
 200055c:	1001703a 	wrctl	status,r2
  
  return context;
 2000560:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2000564:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 2000568:	e0fff317 	ldw	r3,-52(fp)
 200056c:	00800044 	movi	r2,1
 2000570:	10c4983a 	sll	r2,r2,r3
 2000574:	0084303a 	nor	r2,zero,r2
 2000578:	1007883a 	mov	r3,r2
 200057c:	00808034 	movhi	r2,512
 2000580:	109bd804 	addi	r2,r2,28512
 2000584:	10800017 	ldw	r2,0(r2)
 2000588:	1886703a 	and	r3,r3,r2
 200058c:	00808034 	movhi	r2,512
 2000590:	109bd804 	addi	r2,r2,28512
 2000594:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2000598:	00808034 	movhi	r2,512
 200059c:	109bd804 	addi	r2,r2,28512
 20005a0:	10800017 	ldw	r2,0(r2)
 20005a4:	100170fa 	wrctl	ienable,r2
 20005a8:	e0bff417 	ldw	r2,-48(fp)
 20005ac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20005b0:	e0bff117 	ldw	r2,-60(fp)
 20005b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20005b8:	0005883a 	mov	r2,zero
 20005bc:	e0bfff15 	stw	r2,-4(fp)
 20005c0:	e0bfff17 	ldw	r2,-4(fp)
 20005c4:	e0bffb15 	stw	r2,-20(fp)
 20005c8:	e0bffa17 	ldw	r2,-24(fp)
 20005cc:	e0bff015 	stw	r2,-64(fp)
 20005d0:	e0bff017 	ldw	r2,-64(fp)
 20005d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 20005d8:	e0bffb17 	ldw	r2,-20(fp)
}
 20005dc:	e037883a 	mov	sp,fp
 20005e0:	df000017 	ldw	fp,0(sp)
 20005e4:	dec00104 	addi	sp,sp,4
 20005e8:	f800283a 	ret

020005ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20005ec:	defffe04 	addi	sp,sp,-8
 20005f0:	dfc00115 	stw	ra,4(sp)
 20005f4:	df000015 	stw	fp,0(sp)
 20005f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20005fc:	01008034 	movhi	r4,512
 2000600:	2115fc04 	addi	r4,r4,22512
 2000604:	01408034 	movhi	r5,512
 2000608:	29502504 	addi	r5,r5,16532
 200060c:	01808034 	movhi	r6,512
 2000610:	3195fc04 	addi	r6,r6,22512
 2000614:	200066c0 	call	200066c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2000618:	01008034 	movhi	r4,512
 200061c:	21000804 	addi	r4,r4,32
 2000620:	01408034 	movhi	r5,512
 2000624:	29400804 	addi	r5,r5,32
 2000628:	01808034 	movhi	r6,512
 200062c:	31806d04 	addi	r6,r6,436
 2000630:	200066c0 	call	200066c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2000634:	01008034 	movhi	r4,512
 2000638:	210f7104 	addi	r4,r4,15812
 200063c:	01408034 	movhi	r5,512
 2000640:	294f7104 	addi	r5,r5,15812
 2000644:	01808034 	movhi	r6,512
 2000648:	31902504 	addi	r6,r6,16532
 200064c:	200066c0 	call	200066c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2000650:	20026580 	call	2002658 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2000654:	200287c0 	call	200287c <alt_icache_flush_all>
}
 2000658:	e037883a 	mov	sp,fp
 200065c:	dfc00117 	ldw	ra,4(sp)
 2000660:	df000017 	ldw	fp,0(sp)
 2000664:	dec00204 	addi	sp,sp,8
 2000668:	f800283a 	ret

0200066c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200066c:	defffc04 	addi	sp,sp,-16
 2000670:	df000315 	stw	fp,12(sp)
 2000674:	df000304 	addi	fp,sp,12
 2000678:	e13ffd15 	stw	r4,-12(fp)
 200067c:	e17ffe15 	stw	r5,-8(fp)
 2000680:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2000684:	e0fffe17 	ldw	r3,-8(fp)
 2000688:	e0bffd17 	ldw	r2,-12(fp)
 200068c:	18800e26 	beq	r3,r2,20006c8 <alt_load_section+0x5c>
  {
    while( to != end )
 2000690:	00000a06 	br	20006bc <alt_load_section+0x50>
    {
      *to++ = *from++;
 2000694:	e0bffd17 	ldw	r2,-12(fp)
 2000698:	10c00017 	ldw	r3,0(r2)
 200069c:	e0bffe17 	ldw	r2,-8(fp)
 20006a0:	10c00015 	stw	r3,0(r2)
 20006a4:	e0bffe17 	ldw	r2,-8(fp)
 20006a8:	10800104 	addi	r2,r2,4
 20006ac:	e0bffe15 	stw	r2,-8(fp)
 20006b0:	e0bffd17 	ldw	r2,-12(fp)
 20006b4:	10800104 	addi	r2,r2,4
 20006b8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 20006bc:	e0fffe17 	ldw	r3,-8(fp)
 20006c0:	e0bfff17 	ldw	r2,-4(fp)
 20006c4:	18bff31e 	bne	r3,r2,2000694 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 20006c8:	e037883a 	mov	sp,fp
 20006cc:	df000017 	ldw	fp,0(sp)
 20006d0:	dec00104 	addi	sp,sp,4
 20006d4:	f800283a 	ret

020006d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20006d8:	defffd04 	addi	sp,sp,-12
 20006dc:	dfc00215 	stw	ra,8(sp)
 20006e0:	df000115 	stw	fp,4(sp)
 20006e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20006e8:	0009883a 	mov	r4,zero
 20006ec:	20007440 	call	2000744 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20006f0:	20007780 	call	2000778 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20006f4:	01008034 	movhi	r4,512
 20006f8:	210f7104 	addi	r4,r4,15812
 20006fc:	01408034 	movhi	r5,512
 2000700:	294f7104 	addi	r5,r5,15812
 2000704:	01808034 	movhi	r6,512
 2000708:	318f7104 	addi	r6,r6,15812
 200070c:	2002c500 	call	2002c50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2000710:	20027b40 	call	20027b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2000714:	01008034 	movhi	r4,512
 2000718:	210a0604 	addi	r4,r4,10264
 200071c:	20036880 	call	2003688 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2000720:	d125ea17 	ldw	r4,-26712(gp)
 2000724:	d165eb17 	ldw	r5,-26708(gp)
 2000728:	d1a5ec17 	ldw	r6,-26704(gp)
 200072c:	200039c0 	call	200039c <main>
 2000730:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2000734:	01000044 	movi	r4,1
 2000738:	20024f80 	call	20024f8 <close>
  exit (result);
 200073c:	e13fff17 	ldw	r4,-4(fp)
 2000740:	200369c0 	call	200369c <exit>

02000744 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2000744:	defffd04 	addi	sp,sp,-12
 2000748:	dfc00215 	stw	ra,8(sp)
 200074c:	df000115 	stw	fp,4(sp)
 2000750:	df000104 	addi	fp,sp,4
 2000754:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 2000758:	20031f80 	call	20031f8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200075c:	00800044 	movi	r2,1
 2000760:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2000764:	e037883a 	mov	sp,fp
 2000768:	dfc00117 	ldw	ra,4(sp)
 200076c:	df000017 	ldw	fp,0(sp)
 2000770:	dec00204 	addi	sp,sp,8
 2000774:	f800283a 	ret

02000778 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2000778:	defffe04 	addi	sp,sp,-8
 200077c:	dfc00115 	stw	ra,4(sp)
 2000780:	df000015 	stw	fp,0(sp)
 2000784:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 2000788:	01001804 	movi	r4,96
 200078c:	000b883a 	mov	r5,zero
 2000790:	01800084 	movi	r6,2
 2000794:	01c0fa04 	movi	r7,1000
 2000798:	20023140 	call	2002314 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 200079c:	01008034 	movhi	r4,512
 20007a0:	21102f04 	addi	r4,r4,16572
 20007a4:	000b883a 	mov	r5,zero
 20007a8:	000d883a 	mov	r6,zero
 20007ac:	20009680 	call	2000968 <altera_avalon_jtag_uart_init>
 20007b0:	01008034 	movhi	r4,512
 20007b4:	21102504 	addi	r4,r4,16532
 20007b8:	20007e80 	call	20007e8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
 20007bc:	01008034 	movhi	r4,512
 20007c0:	21144704 	addi	r4,r4,20764
 20007c4:	20021100 	call	2002110 <altera_avalon_lcd_16207_init>
 20007c8:	01008034 	movhi	r4,512
 20007cc:	21143d04 	addi	r4,r4,20724
 20007d0:	20007e80 	call	20007e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
 20007d4:	e037883a 	mov	sp,fp
 20007d8:	dfc00117 	ldw	ra,4(sp)
 20007dc:	df000017 	ldw	fp,0(sp)
 20007e0:	dec00204 	addi	sp,sp,8
 20007e4:	f800283a 	ret

020007e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20007e8:	defffd04 	addi	sp,sp,-12
 20007ec:	dfc00215 	stw	ra,8(sp)
 20007f0:	df000115 	stw	fp,4(sp)
 20007f4:	df000104 	addi	fp,sp,4
 20007f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20007fc:	e13fff17 	ldw	r4,-4(fp)
 2000800:	01408034 	movhi	r5,512
 2000804:	2955f304 	addi	r5,r5,22476
 2000808:	20026a00 	call	20026a0 <alt_dev_llist_insert>
}
 200080c:	e037883a 	mov	sp,fp
 2000810:	dfc00117 	ldw	ra,4(sp)
 2000814:	df000017 	ldw	fp,0(sp)
 2000818:	dec00204 	addi	sp,sp,8
 200081c:	f800283a 	ret

02000820 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2000820:	defffa04 	addi	sp,sp,-24
 2000824:	dfc00515 	stw	ra,20(sp)
 2000828:	df000415 	stw	fp,16(sp)
 200082c:	df000404 	addi	fp,sp,16
 2000830:	e13ffd15 	stw	r4,-12(fp)
 2000834:	e17ffe15 	stw	r5,-8(fp)
 2000838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200083c:	e0bffd17 	ldw	r2,-12(fp)
 2000840:	10800017 	ldw	r2,0(r2)
 2000844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2000848:	e0bffc17 	ldw	r2,-16(fp)
 200084c:	11000a04 	addi	r4,r2,40
 2000850:	e0bffd17 	ldw	r2,-12(fp)
 2000854:	11c00217 	ldw	r7,8(r2)
 2000858:	e17ffe17 	ldw	r5,-8(fp)
 200085c:	e1bfff17 	ldw	r6,-4(fp)
 2000860:	2000e680 	call	2000e68 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2000864:	e037883a 	mov	sp,fp
 2000868:	dfc00117 	ldw	ra,4(sp)
 200086c:	df000017 	ldw	fp,0(sp)
 2000870:	dec00204 	addi	sp,sp,8
 2000874:	f800283a 	ret

02000878 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2000878:	defffa04 	addi	sp,sp,-24
 200087c:	dfc00515 	stw	ra,20(sp)
 2000880:	df000415 	stw	fp,16(sp)
 2000884:	df000404 	addi	fp,sp,16
 2000888:	e13ffd15 	stw	r4,-12(fp)
 200088c:	e17ffe15 	stw	r5,-8(fp)
 2000890:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2000894:	e0bffd17 	ldw	r2,-12(fp)
 2000898:	10800017 	ldw	r2,0(r2)
 200089c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20008a0:	e0bffc17 	ldw	r2,-16(fp)
 20008a4:	11000a04 	addi	r4,r2,40
 20008a8:	e0bffd17 	ldw	r2,-12(fp)
 20008ac:	11c00217 	ldw	r7,8(r2)
 20008b0:	e17ffe17 	ldw	r5,-8(fp)
 20008b4:	e1bfff17 	ldw	r6,-4(fp)
 20008b8:	200108c0 	call	200108c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20008bc:	e037883a 	mov	sp,fp
 20008c0:	dfc00117 	ldw	ra,4(sp)
 20008c4:	df000017 	ldw	fp,0(sp)
 20008c8:	dec00204 	addi	sp,sp,8
 20008cc:	f800283a 	ret

020008d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20008d0:	defffc04 	addi	sp,sp,-16
 20008d4:	dfc00315 	stw	ra,12(sp)
 20008d8:	df000215 	stw	fp,8(sp)
 20008dc:	df000204 	addi	fp,sp,8
 20008e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20008e4:	e0bfff17 	ldw	r2,-4(fp)
 20008e8:	10800017 	ldw	r2,0(r2)
 20008ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20008f0:	e0bffe17 	ldw	r2,-8(fp)
 20008f4:	11000a04 	addi	r4,r2,40
 20008f8:	e0bfff17 	ldw	r2,-4(fp)
 20008fc:	11400217 	ldw	r5,8(r2)
 2000900:	2000d000 	call	2000d00 <altera_avalon_jtag_uart_close>
}
 2000904:	e037883a 	mov	sp,fp
 2000908:	dfc00117 	ldw	ra,4(sp)
 200090c:	df000017 	ldw	fp,0(sp)
 2000910:	dec00204 	addi	sp,sp,8
 2000914:	f800283a 	ret

02000918 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2000918:	defffa04 	addi	sp,sp,-24
 200091c:	dfc00515 	stw	ra,20(sp)
 2000920:	df000415 	stw	fp,16(sp)
 2000924:	df000404 	addi	fp,sp,16
 2000928:	e13ffd15 	stw	r4,-12(fp)
 200092c:	e17ffe15 	stw	r5,-8(fp)
 2000930:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2000934:	e0bffd17 	ldw	r2,-12(fp)
 2000938:	10800017 	ldw	r2,0(r2)
 200093c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2000940:	e0bffc17 	ldw	r2,-16(fp)
 2000944:	11000a04 	addi	r4,r2,40
 2000948:	e17ffe17 	ldw	r5,-8(fp)
 200094c:	e1bfff17 	ldw	r6,-4(fp)
 2000950:	2000d740 	call	2000d74 <altera_avalon_jtag_uart_ioctl>
}
 2000954:	e037883a 	mov	sp,fp
 2000958:	dfc00117 	ldw	ra,4(sp)
 200095c:	df000017 	ldw	fp,0(sp)
 2000960:	dec00204 	addi	sp,sp,8
 2000964:	f800283a 	ret

02000968 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2000968:	defffa04 	addi	sp,sp,-24
 200096c:	dfc00515 	stw	ra,20(sp)
 2000970:	df000415 	stw	fp,16(sp)
 2000974:	df000404 	addi	fp,sp,16
 2000978:	e13ffd15 	stw	r4,-12(fp)
 200097c:	e17ffe15 	stw	r5,-8(fp)
 2000980:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2000984:	e0fffd17 	ldw	r3,-12(fp)
 2000988:	00800044 	movi	r2,1
 200098c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2000990:	e0bffd17 	ldw	r2,-12(fp)
 2000994:	10800017 	ldw	r2,0(r2)
 2000998:	11000104 	addi	r4,r2,4
 200099c:	e0bffd17 	ldw	r2,-12(fp)
 20009a0:	10800817 	ldw	r2,32(r2)
 20009a4:	1007883a 	mov	r3,r2
 20009a8:	2005883a 	mov	r2,r4
 20009ac:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20009b0:	e13ffe17 	ldw	r4,-8(fp)
 20009b4:	e17fff17 	ldw	r5,-4(fp)
 20009b8:	d8000015 	stw	zero,0(sp)
 20009bc:	01808034 	movhi	r6,512
 20009c0:	31828a04 	addi	r6,r6,2600
 20009c4:	e1fffd17 	ldw	r7,-12(fp)
 20009c8:	20028ac0 	call	20028ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20009cc:	e0bffd17 	ldw	r2,-12(fp)
 20009d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 20009d4:	e0bffd17 	ldw	r2,-12(fp)
 20009d8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20009dc:	00808034 	movhi	r2,512
 20009e0:	109bdc04 	addi	r2,r2,28528
 20009e4:	10800017 	ldw	r2,0(r2)
 20009e8:	100b883a 	mov	r5,r2
 20009ec:	01808034 	movhi	r6,512
 20009f0:	31831404 	addi	r6,r6,3152
 20009f4:	e1fffd17 	ldw	r7,-12(fp)
 20009f8:	20023a40 	call	20023a4 <alt_alarm_start>
 20009fc:	1004403a 	cmpge	r2,r2,zero
 2000a00:	1000041e 	bne	r2,zero,2000a14 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2000a04:	e0fffd17 	ldw	r3,-12(fp)
 2000a08:	00a00034 	movhi	r2,32768
 2000a0c:	10bfffc4 	addi	r2,r2,-1
 2000a10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2000a14:	e037883a 	mov	sp,fp
 2000a18:	dfc00117 	ldw	ra,4(sp)
 2000a1c:	df000017 	ldw	fp,0(sp)
 2000a20:	dec00204 	addi	sp,sp,8
 2000a24:	f800283a 	ret

02000a28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2000a28:	defff804 	addi	sp,sp,-32
 2000a2c:	df000715 	stw	fp,28(sp)
 2000a30:	df000704 	addi	fp,sp,28
 2000a34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2000a38:	e0bfff17 	ldw	r2,-4(fp)
 2000a3c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 2000a40:	e0bffe17 	ldw	r2,-8(fp)
 2000a44:	10800017 	ldw	r2,0(r2)
 2000a48:	e0bffd15 	stw	r2,-12(fp)
 2000a4c:	00000006 	br	2000a50 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2000a50:	e0bffd17 	ldw	r2,-12(fp)
 2000a54:	10800104 	addi	r2,r2,4
 2000a58:	10800037 	ldwio	r2,0(r2)
 2000a5c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2000a60:	e0bffc17 	ldw	r2,-16(fp)
 2000a64:	1080c00c 	andi	r2,r2,768
 2000a68:	1005003a 	cmpeq	r2,r2,zero
 2000a6c:	1000741e 	bne	r2,zero,2000c40 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2000a70:	e0bffc17 	ldw	r2,-16(fp)
 2000a74:	1080400c 	andi	r2,r2,256
 2000a78:	1005003a 	cmpeq	r2,r2,zero
 2000a7c:	1000351e 	bne	r2,zero,2000b54 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2000a80:	00800074 	movhi	r2,1
 2000a84:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000a88:	e0bffe17 	ldw	r2,-8(fp)
 2000a8c:	10800a17 	ldw	r2,40(r2)
 2000a90:	10800044 	addi	r2,r2,1
 2000a94:	1081ffcc 	andi	r2,r2,2047
 2000a98:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2000a9c:	e0bffe17 	ldw	r2,-8(fp)
 2000aa0:	10c00b17 	ldw	r3,44(r2)
 2000aa4:	e0bffa17 	ldw	r2,-24(fp)
 2000aa8:	18801626 	beq	r3,r2,2000b04 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2000aac:	e0bffd17 	ldw	r2,-12(fp)
 2000ab0:	10800037 	ldwio	r2,0(r2)
 2000ab4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2000ab8:	e0bffb17 	ldw	r2,-20(fp)
 2000abc:	10a0000c 	andi	r2,r2,32768
 2000ac0:	1005003a 	cmpeq	r2,r2,zero
 2000ac4:	10000f1e 	bne	r2,zero,2000b04 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2000ac8:	e0bffe17 	ldw	r2,-8(fp)
 2000acc:	10c00a17 	ldw	r3,40(r2)
 2000ad0:	e0bffb17 	ldw	r2,-20(fp)
 2000ad4:	1009883a 	mov	r4,r2
 2000ad8:	e0bffe17 	ldw	r2,-8(fp)
 2000adc:	1885883a 	add	r2,r3,r2
 2000ae0:	10800e04 	addi	r2,r2,56
 2000ae4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000ae8:	e0bffe17 	ldw	r2,-8(fp)
 2000aec:	10800a17 	ldw	r2,40(r2)
 2000af0:	10800044 	addi	r2,r2,1
 2000af4:	10c1ffcc 	andi	r3,r2,2047
 2000af8:	e0bffe17 	ldw	r2,-8(fp)
 2000afc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2000b00:	003fe106 	br	2000a88 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2000b04:	e0bffb17 	ldw	r2,-20(fp)
 2000b08:	10bfffec 	andhi	r2,r2,65535
 2000b0c:	1005003a 	cmpeq	r2,r2,zero
 2000b10:	1000101e 	bne	r2,zero,2000b54 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2000b14:	e0bffe17 	ldw	r2,-8(fp)
 2000b18:	10c00817 	ldw	r3,32(r2)
 2000b1c:	00bfff84 	movi	r2,-2
 2000b20:	1886703a 	and	r3,r3,r2
 2000b24:	e0bffe17 	ldw	r2,-8(fp)
 2000b28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2000b2c:	e0bffd17 	ldw	r2,-12(fp)
 2000b30:	11000104 	addi	r4,r2,4
 2000b34:	e0bffe17 	ldw	r2,-8(fp)
 2000b38:	10800817 	ldw	r2,32(r2)
 2000b3c:	1007883a 	mov	r3,r2
 2000b40:	2005883a 	mov	r2,r4
 2000b44:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2000b48:	e0bffd17 	ldw	r2,-12(fp)
 2000b4c:	10800104 	addi	r2,r2,4
 2000b50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2000b54:	e0bffc17 	ldw	r2,-16(fp)
 2000b58:	1080800c 	andi	r2,r2,512
 2000b5c:	1005003a 	cmpeq	r2,r2,zero
 2000b60:	103fbb1e 	bne	r2,zero,2000a50 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2000b64:	e0bffc17 	ldw	r2,-16(fp)
 2000b68:	10bfffec 	andhi	r2,r2,65535
 2000b6c:	1004d43a 	srli	r2,r2,16
 2000b70:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2000b74:	00001506 	br	2000bcc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2000b78:	e13ffd17 	ldw	r4,-12(fp)
 2000b7c:	e0bffe17 	ldw	r2,-8(fp)
 2000b80:	10c00d17 	ldw	r3,52(r2)
 2000b84:	e0bffe17 	ldw	r2,-8(fp)
 2000b88:	1885883a 	add	r2,r3,r2
 2000b8c:	10820e04 	addi	r2,r2,2104
 2000b90:	10800003 	ldbu	r2,0(r2)
 2000b94:	10c03fcc 	andi	r3,r2,255
 2000b98:	18c0201c 	xori	r3,r3,128
 2000b9c:	18ffe004 	addi	r3,r3,-128
 2000ba0:	2005883a 	mov	r2,r4
 2000ba4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000ba8:	e0bffe17 	ldw	r2,-8(fp)
 2000bac:	10800d17 	ldw	r2,52(r2)
 2000bb0:	10800044 	addi	r2,r2,1
 2000bb4:	10c1ffcc 	andi	r3,r2,2047
 2000bb8:	e0bffe17 	ldw	r2,-8(fp)
 2000bbc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2000bc0:	e0bff917 	ldw	r2,-28(fp)
 2000bc4:	10bfffc4 	addi	r2,r2,-1
 2000bc8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2000bcc:	e0bff917 	ldw	r2,-28(fp)
 2000bd0:	1005003a 	cmpeq	r2,r2,zero
 2000bd4:	1000051e 	bne	r2,zero,2000bec <altera_avalon_jtag_uart_irq+0x1c4>
 2000bd8:	e0bffe17 	ldw	r2,-8(fp)
 2000bdc:	10c00d17 	ldw	r3,52(r2)
 2000be0:	e0bffe17 	ldw	r2,-8(fp)
 2000be4:	10800c17 	ldw	r2,48(r2)
 2000be8:	18bfe31e 	bne	r3,r2,2000b78 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2000bec:	e0bff917 	ldw	r2,-28(fp)
 2000bf0:	1005003a 	cmpeq	r2,r2,zero
 2000bf4:	103f961e 	bne	r2,zero,2000a50 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2000bf8:	e0bffe17 	ldw	r2,-8(fp)
 2000bfc:	10c00817 	ldw	r3,32(r2)
 2000c00:	00bfff44 	movi	r2,-3
 2000c04:	1886703a 	and	r3,r3,r2
 2000c08:	e0bffe17 	ldw	r2,-8(fp)
 2000c0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2000c10:	e0bffe17 	ldw	r2,-8(fp)
 2000c14:	10800017 	ldw	r2,0(r2)
 2000c18:	11000104 	addi	r4,r2,4
 2000c1c:	e0bffe17 	ldw	r2,-8(fp)
 2000c20:	10800817 	ldw	r2,32(r2)
 2000c24:	1007883a 	mov	r3,r2
 2000c28:	2005883a 	mov	r2,r4
 2000c2c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2000c30:	e0bffd17 	ldw	r2,-12(fp)
 2000c34:	10800104 	addi	r2,r2,4
 2000c38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2000c3c:	003f8406 	br	2000a50 <altera_avalon_jtag_uart_irq+0x28>
}
 2000c40:	e037883a 	mov	sp,fp
 2000c44:	df000017 	ldw	fp,0(sp)
 2000c48:	dec00104 	addi	sp,sp,4
 2000c4c:	f800283a 	ret

02000c50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2000c50:	defffc04 	addi	sp,sp,-16
 2000c54:	df000315 	stw	fp,12(sp)
 2000c58:	df000304 	addi	fp,sp,12
 2000c5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2000c60:	e0bfff17 	ldw	r2,-4(fp)
 2000c64:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2000c68:	e0bffe17 	ldw	r2,-8(fp)
 2000c6c:	10800017 	ldw	r2,0(r2)
 2000c70:	10800104 	addi	r2,r2,4
 2000c74:	10800037 	ldwio	r2,0(r2)
 2000c78:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2000c7c:	e0bffd17 	ldw	r2,-12(fp)
 2000c80:	1081000c 	andi	r2,r2,1024
 2000c84:	1005003a 	cmpeq	r2,r2,zero
 2000c88:	10000c1e 	bne	r2,zero,2000cbc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2000c8c:	e0bffe17 	ldw	r2,-8(fp)
 2000c90:	10800017 	ldw	r2,0(r2)
 2000c94:	11000104 	addi	r4,r2,4
 2000c98:	e0bffe17 	ldw	r2,-8(fp)
 2000c9c:	10800817 	ldw	r2,32(r2)
 2000ca0:	10810014 	ori	r2,r2,1024
 2000ca4:	1007883a 	mov	r3,r2
 2000ca8:	2005883a 	mov	r2,r4
 2000cac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2000cb0:	e0bffe17 	ldw	r2,-8(fp)
 2000cb4:	10000915 	stw	zero,36(r2)
 2000cb8:	00000a06 	br	2000ce4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2000cbc:	e0bffe17 	ldw	r2,-8(fp)
 2000cc0:	10c00917 	ldw	r3,36(r2)
 2000cc4:	00a00034 	movhi	r2,32768
 2000cc8:	10bfff04 	addi	r2,r2,-4
 2000ccc:	10c00536 	bltu	r2,r3,2000ce4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2000cd0:	e0bffe17 	ldw	r2,-8(fp)
 2000cd4:	10800917 	ldw	r2,36(r2)
 2000cd8:	10c00044 	addi	r3,r2,1
 2000cdc:	e0bffe17 	ldw	r2,-8(fp)
 2000ce0:	10c00915 	stw	r3,36(r2)
 2000ce4:	00808034 	movhi	r2,512
 2000ce8:	109bdc04 	addi	r2,r2,28528
 2000cec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2000cf0:	e037883a 	mov	sp,fp
 2000cf4:	df000017 	ldw	fp,0(sp)
 2000cf8:	dec00104 	addi	sp,sp,4
 2000cfc:	f800283a 	ret

02000d00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2000d00:	defffc04 	addi	sp,sp,-16
 2000d04:	df000315 	stw	fp,12(sp)
 2000d08:	df000304 	addi	fp,sp,12
 2000d0c:	e13ffd15 	stw	r4,-12(fp)
 2000d10:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2000d14:	00000706 	br	2000d34 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2000d18:	e0bffe17 	ldw	r2,-8(fp)
 2000d1c:	1090000c 	andi	r2,r2,16384
 2000d20:	1005003a 	cmpeq	r2,r2,zero
 2000d24:	1000031e 	bne	r2,zero,2000d34 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2000d28:	00bffd44 	movi	r2,-11
 2000d2c:	e0bfff15 	stw	r2,-4(fp)
 2000d30:	00000b06 	br	2000d60 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2000d34:	e0bffd17 	ldw	r2,-12(fp)
 2000d38:	10c00d17 	ldw	r3,52(r2)
 2000d3c:	e0bffd17 	ldw	r2,-12(fp)
 2000d40:	10800c17 	ldw	r2,48(r2)
 2000d44:	18800526 	beq	r3,r2,2000d5c <altera_avalon_jtag_uart_close+0x5c>
 2000d48:	e0bffd17 	ldw	r2,-12(fp)
 2000d4c:	10c00917 	ldw	r3,36(r2)
 2000d50:	e0bffd17 	ldw	r2,-12(fp)
 2000d54:	10800117 	ldw	r2,4(r2)
 2000d58:	18bfef36 	bltu	r3,r2,2000d18 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2000d5c:	e03fff15 	stw	zero,-4(fp)
 2000d60:	e0bfff17 	ldw	r2,-4(fp)
}
 2000d64:	e037883a 	mov	sp,fp
 2000d68:	df000017 	ldw	fp,0(sp)
 2000d6c:	dec00104 	addi	sp,sp,4
 2000d70:	f800283a 	ret

02000d74 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2000d74:	defff804 	addi	sp,sp,-32
 2000d78:	df000715 	stw	fp,28(sp)
 2000d7c:	df000704 	addi	fp,sp,28
 2000d80:	e13ffb15 	stw	r4,-20(fp)
 2000d84:	e17ffc15 	stw	r5,-16(fp)
 2000d88:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2000d8c:	00bff9c4 	movi	r2,-25
 2000d90:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2000d94:	e0bffc17 	ldw	r2,-16(fp)
 2000d98:	e0bfff15 	stw	r2,-4(fp)
 2000d9c:	e0ffff17 	ldw	r3,-4(fp)
 2000da0:	189a8060 	cmpeqi	r2,r3,27137
 2000da4:	1000041e 	bne	r2,zero,2000db8 <altera_avalon_jtag_uart_ioctl+0x44>
 2000da8:	e0ffff17 	ldw	r3,-4(fp)
 2000dac:	189a80a0 	cmpeqi	r2,r3,27138
 2000db0:	10001b1e 	bne	r2,zero,2000e20 <altera_avalon_jtag_uart_ioctl+0xac>
 2000db4:	00002706 	br	2000e54 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2000db8:	e0bffb17 	ldw	r2,-20(fp)
 2000dbc:	10c00117 	ldw	r3,4(r2)
 2000dc0:	00a00034 	movhi	r2,32768
 2000dc4:	10bfffc4 	addi	r2,r2,-1
 2000dc8:	18802226 	beq	r3,r2,2000e54 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2000dcc:	e0bffd17 	ldw	r2,-12(fp)
 2000dd0:	10800017 	ldw	r2,0(r2)
 2000dd4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2000dd8:	e0bff917 	ldw	r2,-28(fp)
 2000ddc:	10800090 	cmplti	r2,r2,2
 2000de0:	1000071e 	bne	r2,zero,2000e00 <altera_avalon_jtag_uart_ioctl+0x8c>
 2000de4:	e0fff917 	ldw	r3,-28(fp)
 2000de8:	00a00034 	movhi	r2,32768
 2000dec:	10bfffc4 	addi	r2,r2,-1
 2000df0:	18800326 	beq	r3,r2,2000e00 <altera_avalon_jtag_uart_ioctl+0x8c>
 2000df4:	e0bff917 	ldw	r2,-28(fp)
 2000df8:	e0bffe15 	stw	r2,-8(fp)
 2000dfc:	00000306 	br	2000e0c <altera_avalon_jtag_uart_ioctl+0x98>
 2000e00:	00e00034 	movhi	r3,32768
 2000e04:	18ffff84 	addi	r3,r3,-2
 2000e08:	e0fffe15 	stw	r3,-8(fp)
 2000e0c:	e0bffb17 	ldw	r2,-20(fp)
 2000e10:	e0fffe17 	ldw	r3,-8(fp)
 2000e14:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2000e18:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2000e1c:	00000d06 	br	2000e54 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2000e20:	e0bffb17 	ldw	r2,-20(fp)
 2000e24:	10c00117 	ldw	r3,4(r2)
 2000e28:	00a00034 	movhi	r2,32768
 2000e2c:	10bfffc4 	addi	r2,r2,-1
 2000e30:	18800826 	beq	r3,r2,2000e54 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2000e34:	e13ffd17 	ldw	r4,-12(fp)
 2000e38:	e0bffb17 	ldw	r2,-20(fp)
 2000e3c:	10c00917 	ldw	r3,36(r2)
 2000e40:	e0bffb17 	ldw	r2,-20(fp)
 2000e44:	10800117 	ldw	r2,4(r2)
 2000e48:	1885803a 	cmpltu	r2,r3,r2
 2000e4c:	20800015 	stw	r2,0(r4)
      rc = 0;
 2000e50:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2000e54:	e0bffa17 	ldw	r2,-24(fp)
}
 2000e58:	e037883a 	mov	sp,fp
 2000e5c:	df000017 	ldw	fp,0(sp)
 2000e60:	dec00104 	addi	sp,sp,4
 2000e64:	f800283a 	ret

02000e68 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2000e68:	defff204 	addi	sp,sp,-56
 2000e6c:	dfc00d15 	stw	ra,52(sp)
 2000e70:	df000c15 	stw	fp,48(sp)
 2000e74:	df000c04 	addi	fp,sp,48
 2000e78:	e13ffb15 	stw	r4,-20(fp)
 2000e7c:	e17ffc15 	stw	r5,-16(fp)
 2000e80:	e1bffd15 	stw	r6,-12(fp)
 2000e84:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2000e88:	e0bffc17 	ldw	r2,-16(fp)
 2000e8c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2000e90:	00004806 	br	2000fb4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2000e94:	e0bffb17 	ldw	r2,-20(fp)
 2000e98:	10800a17 	ldw	r2,40(r2)
 2000e9c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2000ea0:	e0bffb17 	ldw	r2,-20(fp)
 2000ea4:	10800b17 	ldw	r2,44(r2)
 2000ea8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2000eac:	e0fff717 	ldw	r3,-36(fp)
 2000eb0:	e0bff617 	ldw	r2,-40(fp)
 2000eb4:	18800536 	bltu	r3,r2,2000ecc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2000eb8:	e0bff717 	ldw	r2,-36(fp)
 2000ebc:	e0fff617 	ldw	r3,-40(fp)
 2000ec0:	10c5c83a 	sub	r2,r2,r3
 2000ec4:	e0bff815 	stw	r2,-32(fp)
 2000ec8:	00000406 	br	2000edc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2000ecc:	00820004 	movi	r2,2048
 2000ed0:	e0fff617 	ldw	r3,-40(fp)
 2000ed4:	10c5c83a 	sub	r2,r2,r3
 2000ed8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2000edc:	e0bff817 	ldw	r2,-32(fp)
 2000ee0:	1005003a 	cmpeq	r2,r2,zero
 2000ee4:	10001f1e 	bne	r2,zero,2000f64 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2000ee8:	e0fffd17 	ldw	r3,-12(fp)
 2000eec:	e0bff817 	ldw	r2,-32(fp)
 2000ef0:	1880022e 	bgeu	r3,r2,2000efc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2000ef4:	e0bffd17 	ldw	r2,-12(fp)
 2000ef8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2000efc:	e0bffb17 	ldw	r2,-20(fp)
 2000f00:	10c00e04 	addi	r3,r2,56
 2000f04:	e0bff617 	ldw	r2,-40(fp)
 2000f08:	1887883a 	add	r3,r3,r2
 2000f0c:	e0bffa17 	ldw	r2,-24(fp)
 2000f10:	1009883a 	mov	r4,r2
 2000f14:	180b883a 	mov	r5,r3
 2000f18:	e1bff817 	ldw	r6,-32(fp)
 2000f1c:	20037480 	call	2003748 <memcpy>
      ptr   += n;
 2000f20:	e0fff817 	ldw	r3,-32(fp)
 2000f24:	e0bffa17 	ldw	r2,-24(fp)
 2000f28:	10c5883a 	add	r2,r2,r3
 2000f2c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2000f30:	e0fffd17 	ldw	r3,-12(fp)
 2000f34:	e0bff817 	ldw	r2,-32(fp)
 2000f38:	1885c83a 	sub	r2,r3,r2
 2000f3c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2000f40:	e0fff617 	ldw	r3,-40(fp)
 2000f44:	e0bff817 	ldw	r2,-32(fp)
 2000f48:	1885883a 	add	r2,r3,r2
 2000f4c:	10c1ffcc 	andi	r3,r2,2047
 2000f50:	e0bffb17 	ldw	r2,-20(fp)
 2000f54:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2000f58:	e0bffd17 	ldw	r2,-12(fp)
 2000f5c:	10800048 	cmpgei	r2,r2,1
 2000f60:	103fcc1e 	bne	r2,zero,2000e94 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2000f64:	e0fffa17 	ldw	r3,-24(fp)
 2000f68:	e0bffc17 	ldw	r2,-16(fp)
 2000f6c:	1880141e 	bne	r3,r2,2000fc0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2000f70:	e0bffe17 	ldw	r2,-8(fp)
 2000f74:	1090000c 	andi	r2,r2,16384
 2000f78:	1004c03a 	cmpne	r2,r2,zero
 2000f7c:	1000101e 	bne	r2,zero,2000fc0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2000f80:	e0bffb17 	ldw	r2,-20(fp)
 2000f84:	10c00a17 	ldw	r3,40(r2)
 2000f88:	e0bff717 	ldw	r2,-36(fp)
 2000f8c:	1880051e 	bne	r3,r2,2000fa4 <altera_avalon_jtag_uart_read+0x13c>
 2000f90:	e0bffb17 	ldw	r2,-20(fp)
 2000f94:	10c00917 	ldw	r3,36(r2)
 2000f98:	e0bffb17 	ldw	r2,-20(fp)
 2000f9c:	10800117 	ldw	r2,4(r2)
 2000fa0:	18bff736 	bltu	r3,r2,2000f80 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2000fa4:	e0bffb17 	ldw	r2,-20(fp)
 2000fa8:	10c00a17 	ldw	r3,40(r2)
 2000fac:	e0bff717 	ldw	r2,-36(fp)
 2000fb0:	18800326 	beq	r3,r2,2000fc0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2000fb4:	e0bffd17 	ldw	r2,-12(fp)
 2000fb8:	10800048 	cmpgei	r2,r2,1
 2000fbc:	103fb51e 	bne	r2,zero,2000e94 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2000fc0:	e0fffa17 	ldw	r3,-24(fp)
 2000fc4:	e0bffc17 	ldw	r2,-16(fp)
 2000fc8:	18801926 	beq	r3,r2,2001030 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000fcc:	0005303a 	rdctl	r2,status
 2000fd0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000fd4:	e0fff517 	ldw	r3,-44(fp)
 2000fd8:	00bfff84 	movi	r2,-2
 2000fdc:	1884703a 	and	r2,r3,r2
 2000fe0:	1001703a 	wrctl	status,r2
  
  return context;
 2000fe4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2000fe8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2000fec:	e0bffb17 	ldw	r2,-20(fp)
 2000ff0:	10800817 	ldw	r2,32(r2)
 2000ff4:	10c00054 	ori	r3,r2,1
 2000ff8:	e0bffb17 	ldw	r2,-20(fp)
 2000ffc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001000:	e0bffb17 	ldw	r2,-20(fp)
 2001004:	10800017 	ldw	r2,0(r2)
 2001008:	11000104 	addi	r4,r2,4
 200100c:	e0bffb17 	ldw	r2,-20(fp)
 2001010:	10800817 	ldw	r2,32(r2)
 2001014:	1007883a 	mov	r3,r2
 2001018:	2005883a 	mov	r2,r4
 200101c:	10c00035 	stwio	r3,0(r2)
 2001020:	e0bff917 	ldw	r2,-28(fp)
 2001024:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001028:	e0bff417 	ldw	r2,-48(fp)
 200102c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2001030:	e0fffa17 	ldw	r3,-24(fp)
 2001034:	e0bffc17 	ldw	r2,-16(fp)
 2001038:	18800526 	beq	r3,r2,2001050 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 200103c:	e0fffa17 	ldw	r3,-24(fp)
 2001040:	e0bffc17 	ldw	r2,-16(fp)
 2001044:	1887c83a 	sub	r3,r3,r2
 2001048:	e0ffff15 	stw	r3,-4(fp)
 200104c:	00000906 	br	2001074 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2001050:	e0bffe17 	ldw	r2,-8(fp)
 2001054:	1090000c 	andi	r2,r2,16384
 2001058:	1005003a 	cmpeq	r2,r2,zero
 200105c:	1000031e 	bne	r2,zero,200106c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2001060:	00bffd44 	movi	r2,-11
 2001064:	e0bfff15 	stw	r2,-4(fp)
 2001068:	00000206 	br	2001074 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 200106c:	00bffec4 	movi	r2,-5
 2001070:	e0bfff15 	stw	r2,-4(fp)
 2001074:	e0bfff17 	ldw	r2,-4(fp)
}
 2001078:	e037883a 	mov	sp,fp
 200107c:	dfc00117 	ldw	ra,4(sp)
 2001080:	df000017 	ldw	fp,0(sp)
 2001084:	dec00204 	addi	sp,sp,8
 2001088:	f800283a 	ret

0200108c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200108c:	defff204 	addi	sp,sp,-56
 2001090:	dfc00d15 	stw	ra,52(sp)
 2001094:	df000c15 	stw	fp,48(sp)
 2001098:	df000c04 	addi	fp,sp,48
 200109c:	e13ffb15 	stw	r4,-20(fp)
 20010a0:	e17ffc15 	stw	r5,-16(fp)
 20010a4:	e1bffd15 	stw	r6,-12(fp)
 20010a8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20010ac:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20010b0:	e0bffc17 	ldw	r2,-16(fp)
 20010b4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20010b8:	00003a06 	br	20011a4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20010bc:	e0bffb17 	ldw	r2,-20(fp)
 20010c0:	10800c17 	ldw	r2,48(r2)
 20010c4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 20010c8:	e0bffb17 	ldw	r2,-20(fp)
 20010cc:	10800d17 	ldw	r2,52(r2)
 20010d0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 20010d4:	e0fffa17 	ldw	r3,-24(fp)
 20010d8:	e0bff917 	ldw	r2,-28(fp)
 20010dc:	1880062e 	bgeu	r3,r2,20010f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 20010e0:	e0fff917 	ldw	r3,-28(fp)
 20010e4:	e0bffa17 	ldw	r2,-24(fp)
 20010e8:	1885c83a 	sub	r2,r3,r2
 20010ec:	10bfffc4 	addi	r2,r2,-1
 20010f0:	e0bff815 	stw	r2,-32(fp)
 20010f4:	00000c06 	br	2001128 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 20010f8:	e0bff917 	ldw	r2,-28(fp)
 20010fc:	1005003a 	cmpeq	r2,r2,zero
 2001100:	1000051e 	bne	r2,zero,2001118 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2001104:	00820004 	movi	r2,2048
 2001108:	e0fffa17 	ldw	r3,-24(fp)
 200110c:	10c5c83a 	sub	r2,r2,r3
 2001110:	e0bff815 	stw	r2,-32(fp)
 2001114:	00000406 	br	2001128 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2001118:	0081ffc4 	movi	r2,2047
 200111c:	e0fffa17 	ldw	r3,-24(fp)
 2001120:	10c5c83a 	sub	r2,r2,r3
 2001124:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2001128:	e0bff817 	ldw	r2,-32(fp)
 200112c:	1005003a 	cmpeq	r2,r2,zero
 2001130:	10001f1e 	bne	r2,zero,20011b0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2001134:	e0fffd17 	ldw	r3,-12(fp)
 2001138:	e0bff817 	ldw	r2,-32(fp)
 200113c:	1880022e 	bgeu	r3,r2,2001148 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2001140:	e0bffd17 	ldw	r2,-12(fp)
 2001144:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2001148:	e0bffb17 	ldw	r2,-20(fp)
 200114c:	10c20e04 	addi	r3,r2,2104
 2001150:	e0bffa17 	ldw	r2,-24(fp)
 2001154:	1885883a 	add	r2,r3,r2
 2001158:	e0fffc17 	ldw	r3,-16(fp)
 200115c:	1009883a 	mov	r4,r2
 2001160:	180b883a 	mov	r5,r3
 2001164:	e1bff817 	ldw	r6,-32(fp)
 2001168:	20037480 	call	2003748 <memcpy>
      ptr   += n;
 200116c:	e0fff817 	ldw	r3,-32(fp)
 2001170:	e0bffc17 	ldw	r2,-16(fp)
 2001174:	10c5883a 	add	r2,r2,r3
 2001178:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 200117c:	e0fffd17 	ldw	r3,-12(fp)
 2001180:	e0bff817 	ldw	r2,-32(fp)
 2001184:	1885c83a 	sub	r2,r3,r2
 2001188:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200118c:	e0fffa17 	ldw	r3,-24(fp)
 2001190:	e0bff817 	ldw	r2,-32(fp)
 2001194:	1885883a 	add	r2,r3,r2
 2001198:	10c1ffcc 	andi	r3,r2,2047
 200119c:	e0bffb17 	ldw	r2,-20(fp)
 20011a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20011a4:	e0bffd17 	ldw	r2,-12(fp)
 20011a8:	10800048 	cmpgei	r2,r2,1
 20011ac:	103fc31e 	bne	r2,zero,20010bc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20011b0:	0005303a 	rdctl	r2,status
 20011b4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20011b8:	e0fff517 	ldw	r3,-44(fp)
 20011bc:	00bfff84 	movi	r2,-2
 20011c0:	1884703a 	and	r2,r3,r2
 20011c4:	1001703a 	wrctl	status,r2
  
  return context;
 20011c8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 20011cc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20011d0:	e0bffb17 	ldw	r2,-20(fp)
 20011d4:	10800817 	ldw	r2,32(r2)
 20011d8:	10c00094 	ori	r3,r2,2
 20011dc:	e0bffb17 	ldw	r2,-20(fp)
 20011e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20011e4:	e0bffb17 	ldw	r2,-20(fp)
 20011e8:	10800017 	ldw	r2,0(r2)
 20011ec:	11000104 	addi	r4,r2,4
 20011f0:	e0bffb17 	ldw	r2,-20(fp)
 20011f4:	10800817 	ldw	r2,32(r2)
 20011f8:	1007883a 	mov	r3,r2
 20011fc:	2005883a 	mov	r2,r4
 2001200:	10c00035 	stwio	r3,0(r2)
 2001204:	e0bff717 	ldw	r2,-36(fp)
 2001208:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200120c:	e0bff417 	ldw	r2,-48(fp)
 2001210:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2001214:	e0bffd17 	ldw	r2,-12(fp)
 2001218:	10800050 	cmplti	r2,r2,1
 200121c:	1000111e 	bne	r2,zero,2001264 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2001220:	e0bffe17 	ldw	r2,-8(fp)
 2001224:	1090000c 	andi	r2,r2,16384
 2001228:	1004c03a 	cmpne	r2,r2,zero
 200122c:	1000101e 	bne	r2,zero,2001270 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2001230:	e0bffb17 	ldw	r2,-20(fp)
 2001234:	10c00d17 	ldw	r3,52(r2)
 2001238:	e0bff917 	ldw	r2,-28(fp)
 200123c:	1880051e 	bne	r3,r2,2001254 <altera_avalon_jtag_uart_write+0x1c8>
 2001240:	e0bffb17 	ldw	r2,-20(fp)
 2001244:	10c00917 	ldw	r3,36(r2)
 2001248:	e0bffb17 	ldw	r2,-20(fp)
 200124c:	10800117 	ldw	r2,4(r2)
 2001250:	18bff736 	bltu	r3,r2,2001230 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2001254:	e0bffb17 	ldw	r2,-20(fp)
 2001258:	10c00d17 	ldw	r3,52(r2)
 200125c:	e0bff917 	ldw	r2,-28(fp)
 2001260:	18800326 	beq	r3,r2,2001270 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 2001264:	e0bffd17 	ldw	r2,-12(fp)
 2001268:	10800048 	cmpgei	r2,r2,1
 200126c:	103fcd1e 	bne	r2,zero,20011a4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2001270:	e0fffc17 	ldw	r3,-16(fp)
 2001274:	e0bff617 	ldw	r2,-40(fp)
 2001278:	18800526 	beq	r3,r2,2001290 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 200127c:	e0fffc17 	ldw	r3,-16(fp)
 2001280:	e0bff617 	ldw	r2,-40(fp)
 2001284:	1887c83a 	sub	r3,r3,r2
 2001288:	e0ffff15 	stw	r3,-4(fp)
 200128c:	00000906 	br	20012b4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2001290:	e0bffe17 	ldw	r2,-8(fp)
 2001294:	1090000c 	andi	r2,r2,16384
 2001298:	1005003a 	cmpeq	r2,r2,zero
 200129c:	1000031e 	bne	r2,zero,20012ac <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 20012a0:	00bffd44 	movi	r2,-11
 20012a4:	e0bfff15 	stw	r2,-4(fp)
 20012a8:	00000206 	br	20012b4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 20012ac:	00bffec4 	movi	r2,-5
 20012b0:	e0bfff15 	stw	r2,-4(fp)
 20012b4:	e0bfff17 	ldw	r2,-4(fp)
}
 20012b8:	e037883a 	mov	sp,fp
 20012bc:	dfc00117 	ldw	ra,4(sp)
 20012c0:	df000017 	ldw	fp,0(sp)
 20012c4:	dec00204 	addi	sp,sp,8
 20012c8:	f800283a 	ret

020012cc <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 20012cc:	defffa04 	addi	sp,sp,-24
 20012d0:	dfc00515 	stw	ra,20(sp)
 20012d4:	df000415 	stw	fp,16(sp)
 20012d8:	df000404 	addi	fp,sp,16
 20012dc:	e13ffe15 	stw	r4,-8(fp)
 20012e0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 20012e4:	e0bffe17 	ldw	r2,-8(fp)
 20012e8:	10800017 	ldw	r2,0(r2)
 20012ec:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 20012f0:	008003f4 	movhi	r2,15
 20012f4:	10909004 	addi	r2,r2,16960
 20012f8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 20012fc:	e0bffe17 	ldw	r2,-8(fp)
 2001300:	10800803 	ldbu	r2,32(r2)
 2001304:	10803fcc 	andi	r2,r2,255
 2001308:	1080201c 	xori	r2,r2,128
 200130c:	10bfe004 	addi	r2,r2,-128
 2001310:	1004c03a 	cmpne	r2,r2,zero
 2001314:	1000161e 	bne	r2,zero,2001370 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 2001318:	00000a06 	br	2001344 <lcd_write_command+0x78>
    if (--i == 0)
 200131c:	e0bffc17 	ldw	r2,-16(fp)
 2001320:	10bfffc4 	addi	r2,r2,-1
 2001324:	e0bffc15 	stw	r2,-16(fp)
 2001328:	e0bffc17 	ldw	r2,-16(fp)
 200132c:	1004c03a 	cmpne	r2,r2,zero
 2001330:	1000041e 	bne	r2,zero,2001344 <lcd_write_command+0x78>
    {
      sp->broken = 1;
 2001334:	e0fffe17 	ldw	r3,-8(fp)
 2001338:	00800044 	movi	r2,1
 200133c:	18800805 	stb	r2,32(r3)
      return;
 2001340:	00000b06 	br	2001370 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 2001344:	e0bffd17 	ldw	r2,-12(fp)
 2001348:	10800104 	addi	r2,r2,4
 200134c:	10800037 	ldwio	r2,0(r2)
 2001350:	1080200c 	andi	r2,r2,128
 2001354:	1004c03a 	cmpne	r2,r2,zero
 2001358:	103ff01e 	bne	r2,zero,200131c <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 200135c:	01001904 	movi	r4,100
 2001360:	20031c80 	call	20031c8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 2001364:	e0bffd17 	ldw	r2,-12(fp)
 2001368:	e0ffff03 	ldbu	r3,-4(fp)
 200136c:	10c00035 	stwio	r3,0(r2)
}
 2001370:	e037883a 	mov	sp,fp
 2001374:	dfc00117 	ldw	ra,4(sp)
 2001378:	df000017 	ldw	fp,0(sp)
 200137c:	dec00204 	addi	sp,sp,8
 2001380:	f800283a 	ret

02001384 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 2001384:	defffa04 	addi	sp,sp,-24
 2001388:	dfc00515 	stw	ra,20(sp)
 200138c:	df000415 	stw	fp,16(sp)
 2001390:	df000404 	addi	fp,sp,16
 2001394:	e13ffe15 	stw	r4,-8(fp)
 2001398:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 200139c:	e0bffe17 	ldw	r2,-8(fp)
 20013a0:	10800017 	ldw	r2,0(r2)
 20013a4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 20013a8:	008003f4 	movhi	r2,15
 20013ac:	10909004 	addi	r2,r2,16960
 20013b0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 20013b4:	e0bffe17 	ldw	r2,-8(fp)
 20013b8:	10800803 	ldbu	r2,32(r2)
 20013bc:	10803fcc 	andi	r2,r2,255
 20013c0:	1080201c 	xori	r2,r2,128
 20013c4:	10bfe004 	addi	r2,r2,-128
 20013c8:	1004c03a 	cmpne	r2,r2,zero
 20013cc:	10001d1e 	bne	r2,zero,2001444 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 20013d0:	00000a06 	br	20013fc <lcd_write_data+0x78>
    if (--i == 0)
 20013d4:	e0bffc17 	ldw	r2,-16(fp)
 20013d8:	10bfffc4 	addi	r2,r2,-1
 20013dc:	e0bffc15 	stw	r2,-16(fp)
 20013e0:	e0bffc17 	ldw	r2,-16(fp)
 20013e4:	1004c03a 	cmpne	r2,r2,zero
 20013e8:	1000041e 	bne	r2,zero,20013fc <lcd_write_data+0x78>
    {
      sp->broken = 1;
 20013ec:	e0fffe17 	ldw	r3,-8(fp)
 20013f0:	00800044 	movi	r2,1
 20013f4:	18800805 	stb	r2,32(r3)
      return;
 20013f8:	00001206 	br	2001444 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 20013fc:	e0bffd17 	ldw	r2,-12(fp)
 2001400:	10800104 	addi	r2,r2,4
 2001404:	10800037 	ldwio	r2,0(r2)
 2001408:	1080200c 	andi	r2,r2,128
 200140c:	1004c03a 	cmpne	r2,r2,zero
 2001410:	103ff01e 	bne	r2,zero,20013d4 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 2001414:	01001904 	movi	r4,100
 2001418:	20031c80 	call	20031c8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 200141c:	e0bffd17 	ldw	r2,-12(fp)
 2001420:	10800204 	addi	r2,r2,8
 2001424:	e0ffff03 	ldbu	r3,-4(fp)
 2001428:	10c00035 	stwio	r3,0(r2)

  sp->address++;
 200142c:	e0bffe17 	ldw	r2,-8(fp)
 2001430:	108008c3 	ldbu	r2,35(r2)
 2001434:	10800044 	addi	r2,r2,1
 2001438:	1007883a 	mov	r3,r2
 200143c:	e0bffe17 	ldw	r2,-8(fp)
 2001440:	10c008c5 	stb	r3,35(r2)
}
 2001444:	e037883a 	mov	sp,fp
 2001448:	dfc00117 	ldw	ra,4(sp)
 200144c:	df000017 	ldw	fp,0(sp)
 2001450:	dec00204 	addi	sp,sp,8
 2001454:	f800283a 	ret

02001458 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 2001458:	defffb04 	addi	sp,sp,-20
 200145c:	dfc00415 	stw	ra,16(sp)
 2001460:	df000315 	stw	fp,12(sp)
 2001464:	dc000215 	stw	r16,8(sp)
 2001468:	df000204 	addi	fp,sp,8
 200146c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 2001470:	e13fff17 	ldw	r4,-4(fp)
 2001474:	01400044 	movi	r5,1
 2001478:	20012cc0 	call	20012cc <lcd_write_command>

  sp->x = 0;
 200147c:	e0bfff17 	ldw	r2,-4(fp)
 2001480:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 2001484:	e0bfff17 	ldw	r2,-4(fp)
 2001488:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 200148c:	e0bfff17 	ldw	r2,-4(fp)
 2001490:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 2001494:	e03ffe15 	stw	zero,-8(fp)
 2001498:	00001c06 	br	200150c <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 200149c:	e13ffe17 	ldw	r4,-8(fp)
 20014a0:	014018c4 	movi	r5,99
 20014a4:	2003d280 	call	2003d28 <__mulsi3>
 20014a8:	10c01004 	addi	r3,r2,64
 20014ac:	e0bfff17 	ldw	r2,-4(fp)
 20014b0:	1889883a 	add	r4,r3,r2
 20014b4:	01400804 	movi	r5,32
 20014b8:	01801444 	movi	r6,81
 20014bc:	20037e80 	call	20037e8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 20014c0:	e13ffe17 	ldw	r4,-8(fp)
 20014c4:	014018c4 	movi	r5,99
 20014c8:	2003d280 	call	2003d28 <__mulsi3>
 20014cc:	10c00c04 	addi	r3,r2,48
 20014d0:	e0bfff17 	ldw	r2,-4(fp)
 20014d4:	1889883a 	add	r4,r3,r2
 20014d8:	01400804 	movi	r5,32
 20014dc:	01800404 	movi	r6,16
 20014e0:	20037e80 	call	20037e8 <memset>
    sp->line[y].width = 0;
 20014e4:	e13ffe17 	ldw	r4,-8(fp)
 20014e8:	e43fff17 	ldw	r16,-4(fp)
 20014ec:	014018c4 	movi	r5,99
 20014f0:	2003d280 	call	2003d28 <__mulsi3>
 20014f4:	1405883a 	add	r2,r2,r16
 20014f8:	10802404 	addi	r2,r2,144
 20014fc:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 2001500:	e0bffe17 	ldw	r2,-8(fp)
 2001504:	10800044 	addi	r2,r2,1
 2001508:	e0bffe15 	stw	r2,-8(fp)
 200150c:	e0bffe17 	ldw	r2,-8(fp)
 2001510:	10800090 	cmplti	r2,r2,2
 2001514:	103fe11e 	bne	r2,zero,200149c <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 2001518:	e037883a 	mov	sp,fp
 200151c:	dfc00217 	ldw	ra,8(sp)
 2001520:	df000117 	ldw	fp,4(sp)
 2001524:	dc000017 	ldw	r16,0(sp)
 2001528:	dec00304 	addi	sp,sp,12
 200152c:	f800283a 	ret

02001530 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 2001530:	defff404 	addi	sp,sp,-48
 2001534:	dfc00b15 	stw	ra,44(sp)
 2001538:	df000a15 	stw	fp,40(sp)
 200153c:	dc800915 	stw	r18,36(sp)
 2001540:	dc400815 	stw	r17,32(sp)
 2001544:	dc000715 	stw	r16,28(sp)
 2001548:	df000704 	addi	fp,sp,28
 200154c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 2001550:	e0bfff17 	ldw	r2,-4(fp)
 2001554:	10800943 	ldbu	r2,37(r2)
 2001558:	10803fcc 	andi	r2,r2,255
 200155c:	1080201c 	xori	r2,r2,128
 2001560:	10bfe004 	addi	r2,r2,-128
 2001564:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 2001568:	e03ffe15 	stw	zero,-8(fp)
 200156c:	00006a06 	br	2001718 <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
 2001570:	e13ffe17 	ldw	r4,-8(fp)
 2001574:	e43fff17 	ldw	r16,-4(fp)
 2001578:	014018c4 	movi	r5,99
 200157c:	2003d280 	call	2003d28 <__mulsi3>
 2001580:	1405883a 	add	r2,r2,r16
 2001584:	10802404 	addi	r2,r2,144
 2001588:	10800043 	ldbu	r2,1(r2)
 200158c:	10803fcc 	andi	r2,r2,255
 2001590:	1080201c 	xori	r2,r2,128
 2001594:	10bfe004 	addi	r2,r2,-128
 2001598:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 200159c:	e13ffe17 	ldw	r4,-8(fp)
 20015a0:	e43fff17 	ldw	r16,-4(fp)
 20015a4:	014018c4 	movi	r5,99
 20015a8:	2003d280 	call	2003d28 <__mulsi3>
 20015ac:	1405883a 	add	r2,r2,r16
 20015b0:	10802404 	addi	r2,r2,144
 20015b4:	10800083 	ldbu	r2,2(r2)
 20015b8:	11003fcc 	andi	r4,r2,255
 20015bc:	e17ffc17 	ldw	r5,-16(fp)
 20015c0:	2003d280 	call	2003d28 <__mulsi3>
 20015c4:	1005d23a 	srai	r2,r2,8
 20015c8:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
 20015cc:	e0fffa17 	ldw	r3,-24(fp)
 20015d0:	e0bffb17 	ldw	r2,-20(fp)
 20015d4:	18800116 	blt	r3,r2,20015dc <lcd_repaint_screen+0xac>
      offset = 0;
 20015d8:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 20015dc:	e03ffd15 	stw	zero,-12(fp)
 20015e0:	00004706 	br	2001700 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 20015e4:	e47ffe17 	ldw	r17,-8(fp)
 20015e8:	e0fffd17 	ldw	r3,-12(fp)
 20015ec:	e0bffa17 	ldw	r2,-24(fp)
 20015f0:	1889883a 	add	r4,r3,r2
 20015f4:	e17ffb17 	ldw	r5,-20(fp)
 20015f8:	2003cb80 	call	2003cb8 <__modsi3>
 20015fc:	1025883a 	mov	r18,r2
 2001600:	e43fff17 	ldw	r16,-4(fp)
 2001604:	8809883a 	mov	r4,r17
 2001608:	014018c4 	movi	r5,99
 200160c:	2003d280 	call	2003d28 <__mulsi3>
 2001610:	1405883a 	add	r2,r2,r16
 2001614:	1485883a 	add	r2,r2,r18
 2001618:	10801004 	addi	r2,r2,64
 200161c:	10800003 	ldbu	r2,0(r2)
 2001620:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 2001624:	e13ffe17 	ldw	r4,-8(fp)
 2001628:	e47ffd17 	ldw	r17,-12(fp)
 200162c:	e43fff17 	ldw	r16,-4(fp)
 2001630:	014018c4 	movi	r5,99
 2001634:	2003d280 	call	2003d28 <__mulsi3>
 2001638:	1405883a 	add	r2,r2,r16
 200163c:	1445883a 	add	r2,r2,r17
 2001640:	10800c04 	addi	r2,r2,48
 2001644:	10800003 	ldbu	r2,0(r2)
 2001648:	10c03fcc 	andi	r3,r2,255
 200164c:	18c0201c 	xori	r3,r3,128
 2001650:	18ffe004 	addi	r3,r3,-128
 2001654:	e0bff947 	ldb	r2,-27(fp)
 2001658:	18802626 	beq	r3,r2,20016f4 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
 200165c:	e0fffe17 	ldw	r3,-8(fp)
 2001660:	d0a00104 	addi	r2,gp,-32764
 2001664:	1885883a 	add	r2,r3,r2
 2001668:	10800003 	ldbu	r2,0(r2)
 200166c:	1007883a 	mov	r3,r2
 2001670:	e0bffd17 	ldw	r2,-12(fp)
 2001674:	1885883a 	add	r2,r3,r2
 2001678:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
 200167c:	e0fff903 	ldbu	r3,-28(fp)
 2001680:	e0bfff17 	ldw	r2,-4(fp)
 2001684:	108008c3 	ldbu	r2,35(r2)
 2001688:	10803fcc 	andi	r2,r2,255
 200168c:	1080201c 	xori	r2,r2,128
 2001690:	10bfe004 	addi	r2,r2,-128
 2001694:	18800926 	beq	r3,r2,20016bc <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 2001698:	e0fff903 	ldbu	r3,-28(fp)
 200169c:	00bfe004 	movi	r2,-128
 20016a0:	1884b03a 	or	r2,r3,r2
 20016a4:	11403fcc 	andi	r5,r2,255
 20016a8:	e13fff17 	ldw	r4,-4(fp)
 20016ac:	20012cc0 	call	20012cc <lcd_write_command>
          sp->address = address;
 20016b0:	e0fff903 	ldbu	r3,-28(fp)
 20016b4:	e0bfff17 	ldw	r2,-4(fp)
 20016b8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 20016bc:	e0bff943 	ldbu	r2,-27(fp)
 20016c0:	11403fcc 	andi	r5,r2,255
 20016c4:	e13fff17 	ldw	r4,-4(fp)
 20016c8:	20013840 	call	2001384 <lcd_write_data>
        sp->line[y].visible[x] = c;
 20016cc:	e13ffe17 	ldw	r4,-8(fp)
 20016d0:	e47ffd17 	ldw	r17,-12(fp)
 20016d4:	e43fff17 	ldw	r16,-4(fp)
 20016d8:	014018c4 	movi	r5,99
 20016dc:	2003d280 	call	2003d28 <__mulsi3>
 20016e0:	1405883a 	add	r2,r2,r16
 20016e4:	1445883a 	add	r2,r2,r17
 20016e8:	10c00c04 	addi	r3,r2,48
 20016ec:	e0bff943 	ldbu	r2,-27(fp)
 20016f0:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 20016f4:	e0bffd17 	ldw	r2,-12(fp)
 20016f8:	10800044 	addi	r2,r2,1
 20016fc:	e0bffd15 	stw	r2,-12(fp)
 2001700:	e0bffd17 	ldw	r2,-12(fp)
 2001704:	10800410 	cmplti	r2,r2,16
 2001708:	103fb61e 	bne	r2,zero,20015e4 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200170c:	e0bffe17 	ldw	r2,-8(fp)
 2001710:	10800044 	addi	r2,r2,1
 2001714:	e0bffe15 	stw	r2,-8(fp)
 2001718:	e0bffe17 	ldw	r2,-8(fp)
 200171c:	10800090 	cmplti	r2,r2,2
 2001720:	103f931e 	bne	r2,zero,2001570 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 2001724:	e037883a 	mov	sp,fp
 2001728:	dfc00417 	ldw	ra,16(sp)
 200172c:	df000317 	ldw	fp,12(sp)
 2001730:	dc800217 	ldw	r18,8(sp)
 2001734:	dc400117 	ldw	r17,4(sp)
 2001738:	dc000017 	ldw	r16,0(sp)
 200173c:	dec00504 	addi	sp,sp,20
 2001740:	f800283a 	ret

02001744 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 2001744:	defffb04 	addi	sp,sp,-20
 2001748:	dfc00415 	stw	ra,16(sp)
 200174c:	df000315 	stw	fp,12(sp)
 2001750:	dc000215 	stw	r16,8(sp)
 2001754:	df000204 	addi	fp,sp,8
 2001758:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200175c:	e03ffe15 	stw	zero,-8(fp)
 2001760:	00002106 	br	20017e8 <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
 2001764:	e0bffe17 	ldw	r2,-8(fp)
 2001768:	10800048 	cmpgei	r2,r2,1
 200176c:	1000121e 	bne	r2,zero,20017b8 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 2001770:	e13ffe17 	ldw	r4,-8(fp)
 2001774:	014018c4 	movi	r5,99
 2001778:	2003d280 	call	2003d28 <__mulsi3>
 200177c:	10c01004 	addi	r3,r2,64
 2001780:	e0bfff17 	ldw	r2,-4(fp)
 2001784:	18a1883a 	add	r16,r3,r2
 2001788:	e0bffe17 	ldw	r2,-8(fp)
 200178c:	11000044 	addi	r4,r2,1
 2001790:	014018c4 	movi	r5,99
 2001794:	2003d280 	call	2003d28 <__mulsi3>
 2001798:	10c01004 	addi	r3,r2,64
 200179c:	e0bfff17 	ldw	r2,-4(fp)
 20017a0:	1885883a 	add	r2,r3,r2
 20017a4:	8009883a 	mov	r4,r16
 20017a8:	100b883a 	mov	r5,r2
 20017ac:	01801404 	movi	r6,80
 20017b0:	20037480 	call	2003748 <memcpy>
 20017b4:	00000906 	br	20017dc <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 20017b8:	e13ffe17 	ldw	r4,-8(fp)
 20017bc:	014018c4 	movi	r5,99
 20017c0:	2003d280 	call	2003d28 <__mulsi3>
 20017c4:	10c01004 	addi	r3,r2,64
 20017c8:	e0bfff17 	ldw	r2,-4(fp)
 20017cc:	1889883a 	add	r4,r3,r2
 20017d0:	01400804 	movi	r5,32
 20017d4:	01801404 	movi	r6,80
 20017d8:	20037e80 	call	20037e8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 20017dc:	e0bffe17 	ldw	r2,-8(fp)
 20017e0:	10800044 	addi	r2,r2,1
 20017e4:	e0bffe15 	stw	r2,-8(fp)
 20017e8:	e0bffe17 	ldw	r2,-8(fp)
 20017ec:	10800090 	cmplti	r2,r2,2
 20017f0:	103fdc1e 	bne	r2,zero,2001764 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 20017f4:	e0bfff17 	ldw	r2,-4(fp)
 20017f8:	10800883 	ldbu	r2,34(r2)
 20017fc:	10bfffc4 	addi	r2,r2,-1
 2001800:	1007883a 	mov	r3,r2
 2001804:	e0bfff17 	ldw	r2,-4(fp)
 2001808:	10c00885 	stb	r3,34(r2)
}
 200180c:	e037883a 	mov	sp,fp
 2001810:	dfc00217 	ldw	ra,8(sp)
 2001814:	df000117 	ldw	fp,4(sp)
 2001818:	dc000017 	ldw	r16,0(sp)
 200181c:	dec00304 	addi	sp,sp,12
 2001820:	f800283a 	ret

02001824 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 2001824:	defff804 	addi	sp,sp,-32
 2001828:	dfc00715 	stw	ra,28(sp)
 200182c:	df000615 	stw	fp,24(sp)
 2001830:	df000604 	addi	fp,sp,24
 2001834:	e13ffd15 	stw	r4,-12(fp)
 2001838:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
 200183c:	e03ffc15 	stw	zero,-16(fp)
 2001840:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
 2001844:	e0bffd17 	ldw	r2,-12(fp)
 2001848:	10800a03 	ldbu	r2,40(r2)
 200184c:	10803fcc 	andi	r2,r2,255
 2001850:	1080201c 	xori	r2,r2,128
 2001854:	10bfe004 	addi	r2,r2,-128
 2001858:	108016d8 	cmpnei	r2,r2,91
 200185c:	10004d1e 	bne	r2,zero,2001994 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
 2001860:	e0bffd17 	ldw	r2,-12(fp)
 2001864:	10800a04 	addi	r2,r2,40
 2001868:	10800044 	addi	r2,r2,1
 200186c:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
 2001870:	00000f06 	br	20018b0 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 2001874:	e13ffc17 	ldw	r4,-16(fp)
 2001878:	01400284 	movi	r5,10
 200187c:	2003d280 	call	2003d28 <__mulsi3>
 2001880:	1007883a 	mov	r3,r2
 2001884:	e0bffa17 	ldw	r2,-24(fp)
 2001888:	10800003 	ldbu	r2,0(r2)
 200188c:	10803fcc 	andi	r2,r2,255
 2001890:	1080201c 	xori	r2,r2,128
 2001894:	10bfe004 	addi	r2,r2,-128
 2001898:	1885883a 	add	r2,r3,r2
 200189c:	10bff404 	addi	r2,r2,-48
 20018a0:	e0bffc15 	stw	r2,-16(fp)
 20018a4:	e0bffa17 	ldw	r2,-24(fp)
 20018a8:	10800044 	addi	r2,r2,1
 20018ac:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 20018b0:	e0bffa17 	ldw	r2,-24(fp)
 20018b4:	10800003 	ldbu	r2,0(r2)
 20018b8:	10803fcc 	andi	r2,r2,255
 20018bc:	1080201c 	xori	r2,r2,128
 20018c0:	10bfe004 	addi	r2,r2,-128
 20018c4:	1007883a 	mov	r3,r2
 20018c8:	00808034 	movhi	r2,512
 20018cc:	1095f904 	addi	r2,r2,22500
 20018d0:	10800017 	ldw	r2,0(r2)
 20018d4:	1885883a 	add	r2,r3,r2
 20018d8:	10800003 	ldbu	r2,0(r2)
 20018dc:	10803fcc 	andi	r2,r2,255
 20018e0:	1080010c 	andi	r2,r2,4
 20018e4:	1004c03a 	cmpne	r2,r2,zero
 20018e8:	103fe21e 	bne	r2,zero,2001874 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 20018ec:	e0bffa17 	ldw	r2,-24(fp)
 20018f0:	10800003 	ldbu	r2,0(r2)
 20018f4:	10803fcc 	andi	r2,r2,255
 20018f8:	1080201c 	xori	r2,r2,128
 20018fc:	10bfe004 	addi	r2,r2,-128
 2001900:	10800ed8 	cmpnei	r2,r2,59
 2001904:	1000251e 	bne	r2,zero,200199c <lcd_handle_escape+0x178>
    {
      ptr++;
 2001908:	e0bffa17 	ldw	r2,-24(fp)
 200190c:	10800044 	addi	r2,r2,1
 2001910:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
 2001914:	00000f06 	br	2001954 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 2001918:	e13ffb17 	ldw	r4,-20(fp)
 200191c:	01400284 	movi	r5,10
 2001920:	2003d280 	call	2003d28 <__mulsi3>
 2001924:	1007883a 	mov	r3,r2
 2001928:	e0bffa17 	ldw	r2,-24(fp)
 200192c:	10800003 	ldbu	r2,0(r2)
 2001930:	10803fcc 	andi	r2,r2,255
 2001934:	1080201c 	xori	r2,r2,128
 2001938:	10bfe004 	addi	r2,r2,-128
 200193c:	1885883a 	add	r2,r3,r2
 2001940:	10bff404 	addi	r2,r2,-48
 2001944:	e0bffb15 	stw	r2,-20(fp)
 2001948:	e0bffa17 	ldw	r2,-24(fp)
 200194c:	10800044 	addi	r2,r2,1
 2001950:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 2001954:	e0bffa17 	ldw	r2,-24(fp)
 2001958:	10800003 	ldbu	r2,0(r2)
 200195c:	10803fcc 	andi	r2,r2,255
 2001960:	1080201c 	xori	r2,r2,128
 2001964:	10bfe004 	addi	r2,r2,-128
 2001968:	1007883a 	mov	r3,r2
 200196c:	00808034 	movhi	r2,512
 2001970:	1095f904 	addi	r2,r2,22500
 2001974:	10800017 	ldw	r2,0(r2)
 2001978:	1885883a 	add	r2,r3,r2
 200197c:	10800003 	ldbu	r2,0(r2)
 2001980:	10803fcc 	andi	r2,r2,255
 2001984:	1080010c 	andi	r2,r2,4
 2001988:	1004c03a 	cmpne	r2,r2,zero
 200198c:	103fe21e 	bne	r2,zero,2001918 <lcd_handle_escape+0xf4>
 2001990:	00000206 	br	200199c <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 2001994:	00bfffc4 	movi	r2,-1
 2001998:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
 200199c:	e0bffe07 	ldb	r2,-8(fp)
 20019a0:	e0bfff15 	stw	r2,-4(fp)
 20019a4:	e0ffff17 	ldw	r3,-4(fp)
 20019a8:	188012a0 	cmpeqi	r2,r3,74
 20019ac:	10002f1e 	bne	r2,zero,2001a6c <lcd_handle_escape+0x248>
 20019b0:	e0ffff17 	ldw	r3,-4(fp)
 20019b4:	188012c8 	cmpgei	r2,r3,75
 20019b8:	1000041e 	bne	r2,zero,20019cc <lcd_handle_escape+0x1a8>
 20019bc:	e0ffff17 	ldw	r3,-4(fp)
 20019c0:	18801220 	cmpeqi	r2,r3,72
 20019c4:	1000081e 	bne	r2,zero,20019e8 <lcd_handle_escape+0x1c4>
 20019c8:	00004a06 	br	2001af4 <lcd_handle_escape+0x2d0>
 20019cc:	e0ffff17 	ldw	r3,-4(fp)
 20019d0:	188012e0 	cmpeqi	r2,r3,75
 20019d4:	10002b1e 	bne	r2,zero,2001a84 <lcd_handle_escape+0x260>
 20019d8:	e0ffff17 	ldw	r3,-4(fp)
 20019dc:	188019a0 	cmpeqi	r2,r3,102
 20019e0:	1000011e 	bne	r2,zero,20019e8 <lcd_handle_escape+0x1c4>
 20019e4:	00004306 	br	2001af4 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 20019e8:	e0bffb17 	ldw	r2,-20(fp)
 20019ec:	10800050 	cmplti	r2,r2,1
 20019f0:	1000051e 	bne	r2,zero,2001a08 <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
 20019f4:	e0bffb17 	ldw	r2,-20(fp)
 20019f8:	10bfffc4 	addi	r2,r2,-1
 20019fc:	1007883a 	mov	r3,r2
 2001a00:	e0bffd17 	ldw	r2,-12(fp)
 2001a04:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 2001a08:	e0bffc17 	ldw	r2,-16(fp)
 2001a0c:	10800050 	cmplti	r2,r2,1
 2001a10:	1000381e 	bne	r2,zero,2001af4 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
 2001a14:	e0bffc17 	ldw	r2,-16(fp)
 2001a18:	10bfffc4 	addi	r2,r2,-1
 2001a1c:	1007883a 	mov	r3,r2
 2001a20:	e0bffd17 	ldw	r2,-12(fp)
 2001a24:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 2001a28:	e0bffd17 	ldw	r2,-12(fp)
 2001a2c:	10800883 	ldbu	r2,34(r2)
 2001a30:	10803fcc 	andi	r2,r2,255
 2001a34:	10800170 	cmpltui	r2,r2,5
 2001a38:	1000061e 	bne	r2,zero,2001a54 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
 2001a3c:	e0fffd17 	ldw	r3,-12(fp)
 2001a40:	00800104 	movi	r2,4
 2001a44:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
 2001a48:	00000206 	br	2001a54 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
 2001a4c:	e13ffd17 	ldw	r4,-12(fp)
 2001a50:	20017440 	call	2001744 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 2001a54:	e0bffd17 	ldw	r2,-12(fp)
 2001a58:	10800883 	ldbu	r2,34(r2)
 2001a5c:	10803fcc 	andi	r2,r2,255
 2001a60:	108000e8 	cmpgeui	r2,r2,3
 2001a64:	103ff91e 	bne	r2,zero,2001a4c <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
 2001a68:	00002206 	br	2001af4 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 2001a6c:	e0bffc17 	ldw	r2,-16(fp)
 2001a70:	10800098 	cmpnei	r2,r2,2
 2001a74:	10001f1e 	bne	r2,zero,2001af4 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
 2001a78:	e13ffd17 	ldw	r4,-12(fp)
 2001a7c:	20014580 	call	2001458 <lcd_clear_screen>
    break;
 2001a80:	00001c06 	br	2001af4 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 2001a84:	e0bffc17 	ldw	r2,-16(fp)
 2001a88:	10800048 	cmpgei	r2,r2,1
 2001a8c:	1000191e 	bne	r2,zero,2001af4 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 2001a90:	e0bffd17 	ldw	r2,-12(fp)
 2001a94:	10800843 	ldbu	r2,33(r2)
 2001a98:	10803fcc 	andi	r2,r2,255
 2001a9c:	10801428 	cmpgeui	r2,r2,80
 2001aa0:	1000141e 	bne	r2,zero,2001af4 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 2001aa4:	e0bffd17 	ldw	r2,-12(fp)
 2001aa8:	10800883 	ldbu	r2,34(r2)
 2001aac:	11003fcc 	andi	r4,r2,255
 2001ab0:	014018c4 	movi	r5,99
 2001ab4:	2003d280 	call	2003d28 <__mulsi3>
 2001ab8:	10c01004 	addi	r3,r2,64
 2001abc:	e0bffd17 	ldw	r2,-12(fp)
 2001ac0:	1887883a 	add	r3,r3,r2
 2001ac4:	e0bffd17 	ldw	r2,-12(fp)
 2001ac8:	10800843 	ldbu	r2,33(r2)
 2001acc:	10803fcc 	andi	r2,r2,255
 2001ad0:	1889883a 	add	r4,r3,r2
 2001ad4:	e0bffd17 	ldw	r2,-12(fp)
 2001ad8:	10800843 	ldbu	r2,33(r2)
 2001adc:	10c03fcc 	andi	r3,r2,255
 2001ae0:	00801404 	movi	r2,80
 2001ae4:	10c5c83a 	sub	r2,r2,r3
 2001ae8:	100d883a 	mov	r6,r2
 2001aec:	01400804 	movi	r5,32
 2001af0:	20037e80 	call	20037e8 <memset>
    }
    break;
  }
}
 2001af4:	e037883a 	mov	sp,fp
 2001af8:	dfc00117 	ldw	ra,4(sp)
 2001afc:	df000017 	ldw	fp,0(sp)
 2001b00:	dec00204 	addi	sp,sp,8
 2001b04:	f800283a 	ret

02001b08 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 2001b08:	defff004 	addi	sp,sp,-64
 2001b0c:	dfc00f15 	stw	ra,60(sp)
 2001b10:	df000e15 	stw	fp,56(sp)
 2001b14:	dc800d15 	stw	r18,52(sp)
 2001b18:	dc400c15 	stw	r17,48(sp)
 2001b1c:	dc000b15 	stw	r16,44(sp)
 2001b20:	df000b04 	addi	fp,sp,44
 2001b24:	e13ffc15 	stw	r4,-16(fp)
 2001b28:	e17ffd15 	stw	r5,-12(fp)
 2001b2c:	e1bffe15 	stw	r6,-8(fp)
 2001b30:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 2001b34:	e0bffe17 	ldw	r2,-8(fp)
 2001b38:	1007883a 	mov	r3,r2
 2001b3c:	e0bffd17 	ldw	r2,-12(fp)
 2001b40:	10c5883a 	add	r2,r2,r3
 2001b44:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 2001b48:	e0fffc17 	ldw	r3,-16(fp)
 2001b4c:	00800044 	movi	r2,1
 2001b50:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
 2001b54:	0000a306 	br	2001de4 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
 2001b58:	e0bffd17 	ldw	r2,-12(fp)
 2001b5c:	10800003 	ldbu	r2,0(r2)
 2001b60:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
 2001b64:	e0bffc17 	ldw	r2,-16(fp)
 2001b68:	10800903 	ldbu	r2,36(r2)
 2001b6c:	10803fcc 	andi	r2,r2,255
 2001b70:	1080201c 	xori	r2,r2,128
 2001b74:	10bfe004 	addi	r2,r2,-128
 2001b78:	1004803a 	cmplt	r2,r2,zero
 2001b7c:	10003b1e 	bne	r2,zero,2001c6c <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
 2001b80:	e0bffc17 	ldw	r2,-16(fp)
 2001b84:	10800903 	ldbu	r2,36(r2)
 2001b88:	10803fcc 	andi	r2,r2,255
 2001b8c:	1080201c 	xori	r2,r2,128
 2001b90:	10bfe004 	addi	r2,r2,-128
 2001b94:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 2001b98:	e0bff717 	ldw	r2,-36(fp)
 2001b9c:	1004c03a 	cmpne	r2,r2,zero
 2001ba0:	1000031e 	bne	r2,zero,2001bb0 <altera_avalon_lcd_16207_write+0xa8>
 2001ba4:	e0bff807 	ldb	r2,-32(fp)
 2001ba8:	108016d8 	cmpnei	r2,r2,91
 2001bac:	1000111e 	bne	r2,zero,2001bf4 <altera_avalon_lcd_16207_write+0xec>
 2001bb0:	e0bff717 	ldw	r2,-36(fp)
 2001bb4:	1005003a 	cmpeq	r2,r2,zero
 2001bb8:	10001a1e 	bne	r2,zero,2001c24 <altera_avalon_lcd_16207_write+0x11c>
 2001bbc:	e0bff807 	ldb	r2,-32(fp)
 2001bc0:	1007883a 	mov	r3,r2
 2001bc4:	00808034 	movhi	r2,512
 2001bc8:	1095f904 	addi	r2,r2,22500
 2001bcc:	10800017 	ldw	r2,0(r2)
 2001bd0:	1885883a 	add	r2,r3,r2
 2001bd4:	10800003 	ldbu	r2,0(r2)
 2001bd8:	10803fcc 	andi	r2,r2,255
 2001bdc:	1080010c 	andi	r2,r2,4
 2001be0:	1004c03a 	cmpne	r2,r2,zero
 2001be4:	10000f1e 	bne	r2,zero,2001c24 <altera_avalon_lcd_16207_write+0x11c>
 2001be8:	e0bff807 	ldb	r2,-32(fp)
 2001bec:	10800ee0 	cmpeqi	r2,r2,59
 2001bf0:	10000c1e 	bne	r2,zero,2001c24 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
 2001bf4:	e0fff717 	ldw	r3,-36(fp)
 2001bf8:	e0bffc17 	ldw	r2,-16(fp)
 2001bfc:	1885883a 	add	r2,r3,r2
 2001c00:	10800a04 	addi	r2,r2,40
 2001c04:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 2001c08:	e17ff807 	ldb	r5,-32(fp)
 2001c0c:	e13ffc17 	ldw	r4,-16(fp)
 2001c10:	20018240 	call	2001824 <lcd_handle_escape>

        sp->esccount = -1;
 2001c14:	e0fffc17 	ldw	r3,-16(fp)
 2001c18:	00bfffc4 	movi	r2,-1
 2001c1c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 2001c20:	00006d06 	br	2001dd8 <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 2001c24:	e0bffc17 	ldw	r2,-16(fp)
 2001c28:	10800903 	ldbu	r2,36(r2)
 2001c2c:	10803fcc 	andi	r2,r2,255
 2001c30:	108001e8 	cmpgeui	r2,r2,7
 2001c34:	1000681e 	bne	r2,zero,2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
 2001c38:	e0fff717 	ldw	r3,-36(fp)
 2001c3c:	e0bffc17 	ldw	r2,-16(fp)
 2001c40:	1885883a 	add	r2,r3,r2
 2001c44:	10c00a04 	addi	r3,r2,40
 2001c48:	e0bff803 	ldbu	r2,-32(fp)
 2001c4c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
 2001c50:	e0bffc17 	ldw	r2,-16(fp)
 2001c54:	10800903 	ldbu	r2,36(r2)
 2001c58:	10800044 	addi	r2,r2,1
 2001c5c:	1007883a 	mov	r3,r2
 2001c60:	e0bffc17 	ldw	r2,-16(fp)
 2001c64:	10c00905 	stb	r3,36(r2)
 2001c68:	00005b06 	br	2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
 2001c6c:	e0bff807 	ldb	r2,-32(fp)
 2001c70:	108006d8 	cmpnei	r2,r2,27
 2001c74:	1000031e 	bne	r2,zero,2001c84 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
 2001c78:	e0bffc17 	ldw	r2,-16(fp)
 2001c7c:	10000905 	stb	zero,36(r2)
 2001c80:	00005506 	br	2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
 2001c84:	e0bff807 	ldb	r2,-32(fp)
 2001c88:	10800358 	cmpnei	r2,r2,13
 2001c8c:	1000031e 	bne	r2,zero,2001c9c <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
 2001c90:	e0bffc17 	ldw	r2,-16(fp)
 2001c94:	10000845 	stb	zero,33(r2)
 2001c98:	00004f06 	br	2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
 2001c9c:	e0bff807 	ldb	r2,-32(fp)
 2001ca0:	10800298 	cmpnei	r2,r2,10
 2001ca4:	1000101e 	bne	r2,zero,2001ce8 <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
 2001ca8:	e0bffc17 	ldw	r2,-16(fp)
 2001cac:	10000845 	stb	zero,33(r2)
      sp->y++;
 2001cb0:	e0bffc17 	ldw	r2,-16(fp)
 2001cb4:	10800883 	ldbu	r2,34(r2)
 2001cb8:	10800044 	addi	r2,r2,1
 2001cbc:	1007883a 	mov	r3,r2
 2001cc0:	e0bffc17 	ldw	r2,-16(fp)
 2001cc4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 2001cc8:	e0bffc17 	ldw	r2,-16(fp)
 2001ccc:	10800883 	ldbu	r2,34(r2)
 2001cd0:	10803fcc 	andi	r2,r2,255
 2001cd4:	108000f0 	cmpltui	r2,r2,3
 2001cd8:	10003f1e 	bne	r2,zero,2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
 2001cdc:	e13ffc17 	ldw	r4,-16(fp)
 2001ce0:	20017440 	call	2001744 <lcd_scroll_up>
 2001ce4:	00003c06 	br	2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
 2001ce8:	e0bff807 	ldb	r2,-32(fp)
 2001cec:	10800218 	cmpnei	r2,r2,8
 2001cf0:	10000c1e 	bne	r2,zero,2001d24 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
 2001cf4:	e0bffc17 	ldw	r2,-16(fp)
 2001cf8:	10800843 	ldbu	r2,33(r2)
 2001cfc:	10803fcc 	andi	r2,r2,255
 2001d00:	1005003a 	cmpeq	r2,r2,zero
 2001d04:	1000341e 	bne	r2,zero,2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
 2001d08:	e0bffc17 	ldw	r2,-16(fp)
 2001d0c:	10800843 	ldbu	r2,33(r2)
 2001d10:	10bfffc4 	addi	r2,r2,-1
 2001d14:	1007883a 	mov	r3,r2
 2001d18:	e0bffc17 	ldw	r2,-16(fp)
 2001d1c:	10c00845 	stb	r3,33(r2)
 2001d20:	00002d06 	br	2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
 2001d24:	e0bff807 	ldb	r2,-32(fp)
 2001d28:	1007883a 	mov	r3,r2
 2001d2c:	00808034 	movhi	r2,512
 2001d30:	1095f904 	addi	r2,r2,22500
 2001d34:	10800017 	ldw	r2,0(r2)
 2001d38:	1885883a 	add	r2,r3,r2
 2001d3c:	10800003 	ldbu	r2,0(r2)
 2001d40:	10803fcc 	andi	r2,r2,255
 2001d44:	1080201c 	xori	r2,r2,128
 2001d48:	10bfe004 	addi	r2,r2,-128
 2001d4c:	108025cc 	andi	r2,r2,151
 2001d50:	1005003a 	cmpeq	r2,r2,zero
 2001d54:	1000201e 	bne	r2,zero,2001dd8 <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 2001d58:	e0bffc17 	ldw	r2,-16(fp)
 2001d5c:	10800883 	ldbu	r2,34(r2)
 2001d60:	10803fcc 	andi	r2,r2,255
 2001d64:	108000b0 	cmpltui	r2,r2,2
 2001d68:	1000021e 	bne	r2,zero,2001d74 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
 2001d6c:	e13ffc17 	ldw	r4,-16(fp)
 2001d70:	20017440 	call	2001744 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 2001d74:	e0bffc17 	ldw	r2,-16(fp)
 2001d78:	10800843 	ldbu	r2,33(r2)
 2001d7c:	10803fcc 	andi	r2,r2,255
 2001d80:	10801428 	cmpgeui	r2,r2,80
 2001d84:	10000e1e 	bne	r2,zero,2001dc0 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
 2001d88:	e0bffc17 	ldw	r2,-16(fp)
 2001d8c:	10800883 	ldbu	r2,34(r2)
 2001d90:	11003fcc 	andi	r4,r2,255
 2001d94:	e0bffc17 	ldw	r2,-16(fp)
 2001d98:	10800843 	ldbu	r2,33(r2)
 2001d9c:	14403fcc 	andi	r17,r2,255
 2001da0:	e43ffc17 	ldw	r16,-16(fp)
 2001da4:	014018c4 	movi	r5,99
 2001da8:	2003d280 	call	2003d28 <__mulsi3>
 2001dac:	1405883a 	add	r2,r2,r16
 2001db0:	1445883a 	add	r2,r2,r17
 2001db4:	10c01004 	addi	r3,r2,64
 2001db8:	e0bff803 	ldbu	r2,-32(fp)
 2001dbc:	18800005 	stb	r2,0(r3)

      sp->x++;
 2001dc0:	e0bffc17 	ldw	r2,-16(fp)
 2001dc4:	10800843 	ldbu	r2,33(r2)
 2001dc8:	10800044 	addi	r2,r2,1
 2001dcc:	1007883a 	mov	r3,r2
 2001dd0:	e0bffc17 	ldw	r2,-16(fp)
 2001dd4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 2001dd8:	e0bffd17 	ldw	r2,-12(fp)
 2001ddc:	10800044 	addi	r2,r2,1
 2001de0:	e0bffd15 	stw	r2,-12(fp)
 2001de4:	e0fffd17 	ldw	r3,-12(fp)
 2001de8:	e0bffb17 	ldw	r2,-20(fp)
 2001dec:	18bf5a36 	bltu	r3,r2,2001b58 <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 2001df0:	00800404 	movi	r2,16
 2001df4:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 2001df8:	e03ffa15 	stw	zero,-24(fp)
 2001dfc:	00003906 	br	2001ee4 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 2001e00:	00801404 	movi	r2,80
 2001e04:	e0bff615 	stw	r2,-40(fp)
 2001e08:	00001206 	br	2001e54 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
 2001e0c:	e13ffa17 	ldw	r4,-24(fp)
 2001e10:	e0bff617 	ldw	r2,-40(fp)
 2001e14:	147fffc4 	addi	r17,r2,-1
 2001e18:	e43ffc17 	ldw	r16,-16(fp)
 2001e1c:	014018c4 	movi	r5,99
 2001e20:	2003d280 	call	2003d28 <__mulsi3>
 2001e24:	1405883a 	add	r2,r2,r16
 2001e28:	1445883a 	add	r2,r2,r17
 2001e2c:	10801004 	addi	r2,r2,64
 2001e30:	10800003 	ldbu	r2,0(r2)
 2001e34:	10803fcc 	andi	r2,r2,255
 2001e38:	1080201c 	xori	r2,r2,128
 2001e3c:	10bfe004 	addi	r2,r2,-128
 2001e40:	10800818 	cmpnei	r2,r2,32
 2001e44:	1000061e 	bne	r2,zero,2001e60 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 2001e48:	e0bff617 	ldw	r2,-40(fp)
 2001e4c:	10bfffc4 	addi	r2,r2,-1
 2001e50:	e0bff615 	stw	r2,-40(fp)
 2001e54:	e0bff617 	ldw	r2,-40(fp)
 2001e58:	10800048 	cmpgei	r2,r2,1
 2001e5c:	103feb1e 	bne	r2,zero,2001e0c <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 2001e60:	e0bff617 	ldw	r2,-40(fp)
 2001e64:	10800448 	cmpgei	r2,r2,17
 2001e68:	1000031e 	bne	r2,zero,2001e78 <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
 2001e6c:	00800404 	movi	r2,16
 2001e70:	e0bff615 	stw	r2,-40(fp)
 2001e74:	00000306 	br	2001e84 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
 2001e78:	e0bff617 	ldw	r2,-40(fp)
 2001e7c:	10800044 	addi	r2,r2,1
 2001e80:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
 2001e84:	e13ffa17 	ldw	r4,-24(fp)
 2001e88:	e0bff617 	ldw	r2,-40(fp)
 2001e8c:	1023883a 	mov	r17,r2
 2001e90:	e43ffc17 	ldw	r16,-16(fp)
 2001e94:	014018c4 	movi	r5,99
 2001e98:	2003d280 	call	2003d28 <__mulsi3>
 2001e9c:	1405883a 	add	r2,r2,r16
 2001ea0:	10802404 	addi	r2,r2,144
 2001ea4:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
 2001ea8:	e0fff917 	ldw	r3,-28(fp)
 2001eac:	e0bff617 	ldw	r2,-40(fp)
 2001eb0:	1880020e 	bge	r3,r2,2001ebc <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
 2001eb4:	e0bff617 	ldw	r2,-40(fp)
 2001eb8:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 2001ebc:	e13ffa17 	ldw	r4,-24(fp)
 2001ec0:	e43ffc17 	ldw	r16,-16(fp)
 2001ec4:	014018c4 	movi	r5,99
 2001ec8:	2003d280 	call	2003d28 <__mulsi3>
 2001ecc:	1405883a 	add	r2,r2,r16
 2001ed0:	10802404 	addi	r2,r2,144
 2001ed4:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 2001ed8:	e0bffa17 	ldw	r2,-24(fp)
 2001edc:	10800044 	addi	r2,r2,1
 2001ee0:	e0bffa15 	stw	r2,-24(fp)
 2001ee4:	e0bffa17 	ldw	r2,-24(fp)
 2001ee8:	10800090 	cmplti	r2,r2,2
 2001eec:	103fc41e 	bne	r2,zero,2001e00 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 2001ef0:	e0bff917 	ldw	r2,-28(fp)
 2001ef4:	10800448 	cmpgei	r2,r2,17
 2001ef8:	1000031e 	bne	r2,zero,2001f08 <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
 2001efc:	e0bffc17 	ldw	r2,-16(fp)
 2001f00:	10000985 	stb	zero,38(r2)
 2001f04:	00003106 	br	2001fcc <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
 2001f08:	e0bff917 	ldw	r2,-28(fp)
 2001f0c:	1085883a 	add	r2,r2,r2
 2001f10:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
 2001f14:	e0bff917 	ldw	r2,-28(fp)
 2001f18:	1007883a 	mov	r3,r2
 2001f1c:	e0bffc17 	ldw	r2,-16(fp)
 2001f20:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 2001f24:	e03ffa15 	stw	zero,-24(fp)
 2001f28:	00002506 	br	2001fc0 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 2001f2c:	e13ffa17 	ldw	r4,-24(fp)
 2001f30:	e43ffc17 	ldw	r16,-16(fp)
 2001f34:	014018c4 	movi	r5,99
 2001f38:	2003d280 	call	2003d28 <__mulsi3>
 2001f3c:	1405883a 	add	r2,r2,r16
 2001f40:	10802404 	addi	r2,r2,144
 2001f44:	10800043 	ldbu	r2,1(r2)
 2001f48:	10803fcc 	andi	r2,r2,255
 2001f4c:	1080201c 	xori	r2,r2,128
 2001f50:	10bfe004 	addi	r2,r2,-128
 2001f54:	10800450 	cmplti	r2,r2,17
 2001f58:	1000161e 	bne	r2,zero,2001fb4 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 2001f5c:	e4bffa17 	ldw	r18,-24(fp)
 2001f60:	e13ffa17 	ldw	r4,-24(fp)
 2001f64:	e43ffc17 	ldw	r16,-16(fp)
 2001f68:	014018c4 	movi	r5,99
 2001f6c:	2003d280 	call	2003d28 <__mulsi3>
 2001f70:	1405883a 	add	r2,r2,r16
 2001f74:	10802404 	addi	r2,r2,144
 2001f78:	10800043 	ldbu	r2,1(r2)
 2001f7c:	10803fcc 	andi	r2,r2,255
 2001f80:	1080201c 	xori	r2,r2,128
 2001f84:	10bfe004 	addi	r2,r2,-128
 2001f88:	1008923a 	slli	r4,r2,8
 2001f8c:	e17ff917 	ldw	r5,-28(fp)
 2001f90:	2003c580 	call	2003c58 <__divsi3>
 2001f94:	1023883a 	mov	r17,r2
 2001f98:	e43ffc17 	ldw	r16,-16(fp)
 2001f9c:	9009883a 	mov	r4,r18
 2001fa0:	014018c4 	movi	r5,99
 2001fa4:	2003d280 	call	2003d28 <__mulsi3>
 2001fa8:	1405883a 	add	r2,r2,r16
 2001fac:	10802404 	addi	r2,r2,144
 2001fb0:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 2001fb4:	e0bffa17 	ldw	r2,-24(fp)
 2001fb8:	10800044 	addi	r2,r2,1
 2001fbc:	e0bffa15 	stw	r2,-24(fp)
 2001fc0:	e0bffa17 	ldw	r2,-24(fp)
 2001fc4:	10800090 	cmplti	r2,r2,2
 2001fc8:	103fd81e 	bne	r2,zero,2001f2c <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 2001fcc:	e0bffc17 	ldw	r2,-16(fp)
 2001fd0:	10800943 	ldbu	r2,37(r2)
 2001fd4:	10803fcc 	andi	r2,r2,255
 2001fd8:	1080201c 	xori	r2,r2,128
 2001fdc:	10bfe004 	addi	r2,r2,-128
 2001fe0:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
 2001fe4:	e13ffc17 	ldw	r4,-16(fp)
 2001fe8:	20015300 	call	2001530 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 2001fec:	e0bffc17 	ldw	r2,-16(fp)
 2001ff0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 2001ff4:	e0bffc17 	ldw	r2,-16(fp)
 2001ff8:	10800943 	ldbu	r2,37(r2)
 2001ffc:	10c03fcc 	andi	r3,r2,255
 2002000:	18c0201c 	xori	r3,r3,128
 2002004:	18ffe004 	addi	r3,r3,-128
 2002008:	e0bff517 	ldw	r2,-44(fp)
 200200c:	18800426 	beq	r3,r2,2002020 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 2002010:	e0fffc17 	ldw	r3,-16(fp)
 2002014:	00800044 	movi	r2,1
 2002018:	188009c5 	stb	r2,39(r3)
  }
 200201c:	003feb06 	br	2001fcc <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 2002020:	e0bffe17 	ldw	r2,-8(fp)
}
 2002024:	e037883a 	mov	sp,fp
 2002028:	dfc00417 	ldw	ra,16(sp)
 200202c:	df000317 	ldw	fp,12(sp)
 2002030:	dc800217 	ldw	r18,8(sp)
 2002034:	dc400117 	ldw	r17,4(sp)
 2002038:	dc000017 	ldw	r16,0(sp)
 200203c:	dec00504 	addi	sp,sp,20
 2002040:	f800283a 	ret

02002044 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 2002044:	defffc04 	addi	sp,sp,-16
 2002048:	dfc00315 	stw	ra,12(sp)
 200204c:	df000215 	stw	fp,8(sp)
 2002050:	df000204 	addi	fp,sp,8
 2002054:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 2002058:	e0bfff17 	ldw	r2,-4(fp)
 200205c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 2002060:	e0bffe17 	ldw	r2,-8(fp)
 2002064:	10800943 	ldbu	r2,37(r2)
 2002068:	10803fcc 	andi	r2,r2,255
 200206c:	1080201c 	xori	r2,r2,128
 2002070:	10bfe004 	addi	r2,r2,-128
 2002074:	10c00044 	addi	r3,r2,1
 2002078:	e0bffe17 	ldw	r2,-8(fp)
 200207c:	10800983 	ldbu	r2,38(r2)
 2002080:	10803fcc 	andi	r2,r2,255
 2002084:	1080201c 	xori	r2,r2,128
 2002088:	10bfe004 	addi	r2,r2,-128
 200208c:	18800316 	blt	r3,r2,200209c <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
 2002090:	e0bffe17 	ldw	r2,-8(fp)
 2002094:	10000945 	stb	zero,37(r2)
 2002098:	00000606 	br	20020b4 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
 200209c:	e0bffe17 	ldw	r2,-8(fp)
 20020a0:	10800943 	ldbu	r2,37(r2)
 20020a4:	10800044 	addi	r2,r2,1
 20020a8:	1007883a 	mov	r3,r2
 20020ac:	e0bffe17 	ldw	r2,-8(fp)
 20020b0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 20020b4:	e0bffe17 	ldw	r2,-8(fp)
 20020b8:	10800983 	ldbu	r2,38(r2)
 20020bc:	10803fcc 	andi	r2,r2,255
 20020c0:	1080201c 	xori	r2,r2,128
 20020c4:	10bfe004 	addi	r2,r2,-128
 20020c8:	10800050 	cmplti	r2,r2,1
 20020cc:	1000091e 	bne	r2,zero,20020f4 <alt_lcd_16207_timeout+0xb0>
 20020d0:	e0bffe17 	ldw	r2,-8(fp)
 20020d4:	108009c3 	ldbu	r2,39(r2)
 20020d8:	10803fcc 	andi	r2,r2,255
 20020dc:	1080201c 	xori	r2,r2,128
 20020e0:	10bfe004 	addi	r2,r2,-128
 20020e4:	1004c03a 	cmpne	r2,r2,zero
 20020e8:	1000021e 	bne	r2,zero,20020f4 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
 20020ec:	e13ffe17 	ldw	r4,-8(fp)
 20020f0:	20015300 	call	2001530 <lcd_repaint_screen>

  return sp->period;
 20020f4:	e0bffe17 	ldw	r2,-8(fp)
 20020f8:	10800717 	ldw	r2,28(r2)
}
 20020fc:	e037883a 	mov	sp,fp
 2002100:	dfc00117 	ldw	ra,4(sp)
 2002104:	df000017 	ldw	fp,0(sp)
 2002108:	dec00204 	addi	sp,sp,8
 200210c:	f800283a 	ret

02002110 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 2002110:	defffc04 	addi	sp,sp,-16
 2002114:	dfc00315 	stw	ra,12(sp)
 2002118:	df000215 	stw	fp,8(sp)
 200211c:	df000204 	addi	fp,sp,8
 2002120:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 2002124:	e0bfff17 	ldw	r2,-4(fp)
 2002128:	10800017 	ldw	r2,0(r2)
 200212c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 2002130:	e0bfff17 	ldw	r2,-4(fp)
 2002134:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 2002138:	010ea604 	movi	r4,15000
 200213c:	20031c80 	call	20031c8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 2002140:	e0bffe17 	ldw	r2,-8(fp)
 2002144:	1007883a 	mov	r3,r2
 2002148:	00800c04 	movi	r2,48
 200214c:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 2002150:	01040104 	movi	r4,4100
 2002154:	20031c80 	call	20031c8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 2002158:	e0bffe17 	ldw	r2,-8(fp)
 200215c:	1007883a 	mov	r3,r2
 2002160:	00800c04 	movi	r2,48
 2002164:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 2002168:	0100fa04 	movi	r4,1000
 200216c:	20031c80 	call	20031c8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 2002170:	e0bffe17 	ldw	r2,-8(fp)
 2002174:	1007883a 	mov	r3,r2
 2002178:	00800c04 	movi	r2,48
 200217c:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 2002180:	e13fff17 	ldw	r4,-4(fp)
 2002184:	01400e04 	movi	r5,56
 2002188:	20012cc0 	call	20012cc <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 200218c:	e13fff17 	ldw	r4,-4(fp)
 2002190:	01400204 	movi	r5,8
 2002194:	20012cc0 	call	20012cc <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 2002198:	e13fff17 	ldw	r4,-4(fp)
 200219c:	20014580 	call	2001458 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 20021a0:	e13fff17 	ldw	r4,-4(fp)
 20021a4:	01400184 	movi	r5,6
 20021a8:	20012cc0 	call	20012cc <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 20021ac:	e13fff17 	ldw	r4,-4(fp)
 20021b0:	01400304 	movi	r5,12
 20021b4:	20012cc0 	call	20012cc <lcd_write_command>

  sp->esccount = -1;
 20021b8:	e0ffff17 	ldw	r3,-4(fp)
 20021bc:	00bfffc4 	movi	r2,-1
 20021c0:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
 20021c4:	e0bfff17 	ldw	r2,-4(fp)
 20021c8:	11000a04 	addi	r4,r2,40
 20021cc:	000b883a 	mov	r5,zero
 20021d0:	01800204 	movi	r6,8
 20021d4:	20037e80 	call	20037e8 <memset>

  sp->scrollpos = 0;
 20021d8:	e0bfff17 	ldw	r2,-4(fp)
 20021dc:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 20021e0:	e0bfff17 	ldw	r2,-4(fp)
 20021e4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 20021e8:	e0bfff17 	ldw	r2,-4(fp)
 20021ec:	100009c5 	stb	zero,39(r2)
 20021f0:	00808034 	movhi	r2,512
 20021f4:	109bdc04 	addi	r2,r2,28528
 20021f8:	10800017 	ldw	r2,0(r2)
 20021fc:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 2002200:	01400284 	movi	r5,10
 2002204:	2003d180 	call	2003d18 <__udivsi3>
 2002208:	1007883a 	mov	r3,r2
 200220c:	e0bfff17 	ldw	r2,-4(fp)
 2002210:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 2002214:	e0bfff17 	ldw	r2,-4(fp)
 2002218:	11000104 	addi	r4,r2,4
 200221c:	e0bfff17 	ldw	r2,-4(fp)
 2002220:	10800717 	ldw	r2,28(r2)
 2002224:	100b883a 	mov	r5,r2
 2002228:	01808034 	movhi	r6,512
 200222c:	31881104 	addi	r6,r6,8260
 2002230:	e1ffff17 	ldw	r7,-4(fp)
 2002234:	20023a40 	call	20023a4 <alt_alarm_start>
}
 2002238:	e037883a 	mov	sp,fp
 200223c:	dfc00117 	ldw	ra,4(sp)
 2002240:	df000017 	ldw	fp,0(sp)
 2002244:	dec00204 	addi	sp,sp,8
 2002248:	f800283a 	ret

0200224c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200224c:	defffa04 	addi	sp,sp,-24
 2002250:	dfc00515 	stw	ra,20(sp)
 2002254:	df000415 	stw	fp,16(sp)
 2002258:	df000404 	addi	fp,sp,16
 200225c:	e13ffd15 	stw	r4,-12(fp)
 2002260:	e17ffe15 	stw	r5,-8(fp)
 2002264:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 2002268:	e0bffd17 	ldw	r2,-12(fp)
 200226c:	10800017 	ldw	r2,0(r2)
 2002270:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 2002274:	e0bffc17 	ldw	r2,-16(fp)
 2002278:	11000a04 	addi	r4,r2,40
 200227c:	e0bffd17 	ldw	r2,-12(fp)
 2002280:	11c00217 	ldw	r7,8(r2)
 2002284:	e17ffe17 	ldw	r5,-8(fp)
 2002288:	e1bfff17 	ldw	r6,-4(fp)
 200228c:	2001b080 	call	2001b08 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 2002290:	e037883a 	mov	sp,fp
 2002294:	dfc00117 	ldw	ra,4(sp)
 2002298:	df000017 	ldw	fp,0(sp)
 200229c:	dec00204 	addi	sp,sp,8
 20022a0:	f800283a 	ret

020022a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20022a4:	defffa04 	addi	sp,sp,-24
 20022a8:	dfc00515 	stw	ra,20(sp)
 20022ac:	df000415 	stw	fp,16(sp)
 20022b0:	df000404 	addi	fp,sp,16
 20022b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 20022b8:	e0bfff17 	ldw	r2,-4(fp)
 20022bc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 20022c0:	e0bfff17 	ldw	r2,-4(fp)
 20022c4:	10800104 	addi	r2,r2,4
 20022c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20022cc:	0005303a 	rdctl	r2,status
 20022d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20022d4:	e0fffd17 	ldw	r3,-12(fp)
 20022d8:	00bfff84 	movi	r2,-2
 20022dc:	1884703a 	and	r2,r3,r2
 20022e0:	1001703a 	wrctl	status,r2
  
  return context;
 20022e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 20022e8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 20022ec:	20030bc0 	call	20030bc <alt_tick>
 20022f0:	e0bffe17 	ldw	r2,-8(fp)
 20022f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20022f8:	e0bffc17 	ldw	r2,-16(fp)
 20022fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2002300:	e037883a 	mov	sp,fp
 2002304:	dfc00117 	ldw	ra,4(sp)
 2002308:	df000017 	ldw	fp,0(sp)
 200230c:	dec00204 	addi	sp,sp,8
 2002310:	f800283a 	ret

02002314 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2002314:	defff804 	addi	sp,sp,-32
 2002318:	dfc00715 	stw	ra,28(sp)
 200231c:	df000615 	stw	fp,24(sp)
 2002320:	df000604 	addi	fp,sp,24
 2002324:	e13ffc15 	stw	r4,-16(fp)
 2002328:	e17ffd15 	stw	r5,-12(fp)
 200232c:	e1bffe15 	stw	r6,-8(fp)
 2002330:	e1ffff15 	stw	r7,-4(fp)
 2002334:	e0bfff17 	ldw	r2,-4(fp)
 2002338:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200233c:	00808034 	movhi	r2,512
 2002340:	109bdc04 	addi	r2,r2,28528
 2002344:	10800017 	ldw	r2,0(r2)
 2002348:	1004c03a 	cmpne	r2,r2,zero
 200234c:	1000041e 	bne	r2,zero,2002360 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 2002350:	00c08034 	movhi	r3,512
 2002354:	18dbdc04 	addi	r3,r3,28528
 2002358:	e0bffb17 	ldw	r2,-20(fp)
 200235c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2002360:	e0bffc17 	ldw	r2,-16(fp)
 2002364:	10800104 	addi	r2,r2,4
 2002368:	1007883a 	mov	r3,r2
 200236c:	008001c4 	movi	r2,7
 2002370:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2002374:	d8000015 	stw	zero,0(sp)
 2002378:	e13ffd17 	ldw	r4,-12(fp)
 200237c:	e17ffe17 	ldw	r5,-8(fp)
 2002380:	01808034 	movhi	r6,512
 2002384:	3188a904 	addi	r6,r6,8868
 2002388:	e1fffc17 	ldw	r7,-16(fp)
 200238c:	20028ac0 	call	20028ac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2002390:	e037883a 	mov	sp,fp
 2002394:	dfc00117 	ldw	ra,4(sp)
 2002398:	df000017 	ldw	fp,0(sp)
 200239c:	dec00204 	addi	sp,sp,8
 20023a0:	f800283a 	ret

020023a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20023a4:	defff404 	addi	sp,sp,-48
 20023a8:	df000b15 	stw	fp,44(sp)
 20023ac:	df000b04 	addi	fp,sp,44
 20023b0:	e13ffb15 	stw	r4,-20(fp)
 20023b4:	e17ffc15 	stw	r5,-16(fp)
 20023b8:	e1bffd15 	stw	r6,-12(fp)
 20023bc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20023c0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20023c4:	00808034 	movhi	r2,512
 20023c8:	109bdc04 	addi	r2,r2,28528
 20023cc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 20023d0:	1005003a 	cmpeq	r2,r2,zero
 20023d4:	1000411e 	bne	r2,zero,20024dc <alt_alarm_start+0x138>
  {
    if (alarm)
 20023d8:	e0bffb17 	ldw	r2,-20(fp)
 20023dc:	1005003a 	cmpeq	r2,r2,zero
 20023e0:	10003b1e 	bne	r2,zero,20024d0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 20023e4:	e0fffb17 	ldw	r3,-20(fp)
 20023e8:	e0bffd17 	ldw	r2,-12(fp)
 20023ec:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 20023f0:	e0fffb17 	ldw	r3,-20(fp)
 20023f4:	e0bffe17 	ldw	r2,-8(fp)
 20023f8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20023fc:	0005303a 	rdctl	r2,status
 2002400:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002404:	e0fff817 	ldw	r3,-32(fp)
 2002408:	00bfff84 	movi	r2,-2
 200240c:	1884703a 	and	r2,r3,r2
 2002410:	1001703a 	wrctl	status,r2
  
  return context;
 2002414:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2002418:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200241c:	00808034 	movhi	r2,512
 2002420:	109bdd04 	addi	r2,r2,28532
 2002424:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2002428:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200242c:	e0fffc17 	ldw	r3,-16(fp)
 2002430:	e0bff917 	ldw	r2,-28(fp)
 2002434:	1885883a 	add	r2,r3,r2
 2002438:	10c00044 	addi	r3,r2,1
 200243c:	e0bffb17 	ldw	r2,-20(fp)
 2002440:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2002444:	e0bffb17 	ldw	r2,-20(fp)
 2002448:	10c00217 	ldw	r3,8(r2)
 200244c:	e0bff917 	ldw	r2,-28(fp)
 2002450:	1880042e 	bgeu	r3,r2,2002464 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2002454:	e0fffb17 	ldw	r3,-20(fp)
 2002458:	00800044 	movi	r2,1
 200245c:	18800405 	stb	r2,16(r3)
 2002460:	00000206 	br	200246c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2002464:	e0bffb17 	ldw	r2,-20(fp)
 2002468:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200246c:	e0fffb17 	ldw	r3,-20(fp)
 2002470:	00808034 	movhi	r2,512
 2002474:	1095f704 	addi	r2,r2,22492
 2002478:	e0bff615 	stw	r2,-40(fp)
 200247c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2002480:	e0fff717 	ldw	r3,-36(fp)
 2002484:	e0bff617 	ldw	r2,-40(fp)
 2002488:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200248c:	e0bff617 	ldw	r2,-40(fp)
 2002490:	10c00017 	ldw	r3,0(r2)
 2002494:	e0bff717 	ldw	r2,-36(fp)
 2002498:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200249c:	e0bff617 	ldw	r2,-40(fp)
 20024a0:	10c00017 	ldw	r3,0(r2)
 20024a4:	e0bff717 	ldw	r2,-36(fp)
 20024a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 20024ac:	e0fff617 	ldw	r3,-40(fp)
 20024b0:	e0bff717 	ldw	r2,-36(fp)
 20024b4:	18800015 	stw	r2,0(r3)
 20024b8:	e0bffa17 	ldw	r2,-24(fp)
 20024bc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20024c0:	e0bff517 	ldw	r2,-44(fp)
 20024c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20024c8:	e03fff15 	stw	zero,-4(fp)
 20024cc:	00000506 	br	20024e4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 20024d0:	00bffa84 	movi	r2,-22
 20024d4:	e0bfff15 	stw	r2,-4(fp)
 20024d8:	00000206 	br	20024e4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 20024dc:	00bfde84 	movi	r2,-134
 20024e0:	e0bfff15 	stw	r2,-4(fp)
 20024e4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 20024e8:	e037883a 	mov	sp,fp
 20024ec:	df000017 	ldw	fp,0(sp)
 20024f0:	dec00104 	addi	sp,sp,4
 20024f4:	f800283a 	ret

020024f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20024f8:	defff804 	addi	sp,sp,-32
 20024fc:	dfc00715 	stw	ra,28(sp)
 2002500:	df000615 	stw	fp,24(sp)
 2002504:	df000604 	addi	fp,sp,24
 2002508:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200250c:	e0bffc17 	ldw	r2,-16(fp)
 2002510:	1004803a 	cmplt	r2,r2,zero
 2002514:	1000091e 	bne	r2,zero,200253c <close+0x44>
 2002518:	e13ffc17 	ldw	r4,-16(fp)
 200251c:	01400304 	movi	r5,12
 2002520:	2003d280 	call	2003d28 <__mulsi3>
 2002524:	1007883a 	mov	r3,r2
 2002528:	00808034 	movhi	r2,512
 200252c:	10948f04 	addi	r2,r2,21052
 2002530:	1887883a 	add	r3,r3,r2
 2002534:	e0ffff15 	stw	r3,-4(fp)
 2002538:	00000106 	br	2002540 <close+0x48>
 200253c:	e03fff15 	stw	zero,-4(fp)
 2002540:	e0bfff17 	ldw	r2,-4(fp)
 2002544:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2002548:	e0bffb17 	ldw	r2,-20(fp)
 200254c:	1005003a 	cmpeq	r2,r2,zero
 2002550:	10001d1e 	bne	r2,zero,20025c8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002554:	e0bffb17 	ldw	r2,-20(fp)
 2002558:	10800017 	ldw	r2,0(r2)
 200255c:	10800417 	ldw	r2,16(r2)
 2002560:	1005003a 	cmpeq	r2,r2,zero
 2002564:	1000071e 	bne	r2,zero,2002584 <close+0x8c>
 2002568:	e0bffb17 	ldw	r2,-20(fp)
 200256c:	10800017 	ldw	r2,0(r2)
 2002570:	10800417 	ldw	r2,16(r2)
 2002574:	e13ffb17 	ldw	r4,-20(fp)
 2002578:	103ee83a 	callr	r2
 200257c:	e0bffe15 	stw	r2,-8(fp)
 2002580:	00000106 	br	2002588 <close+0x90>
 2002584:	e03ffe15 	stw	zero,-8(fp)
 2002588:	e0bffe17 	ldw	r2,-8(fp)
 200258c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2002590:	e13ffc17 	ldw	r4,-16(fp)
 2002594:	2002fac0 	call	2002fac <alt_release_fd>
    if (rval < 0)
 2002598:	e0bffa17 	ldw	r2,-24(fp)
 200259c:	1004403a 	cmpge	r2,r2,zero
 20025a0:	1000071e 	bne	r2,zero,20025c0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 20025a4:	20025f80 	call	20025f8 <alt_get_errno>
 20025a8:	e0fffa17 	ldw	r3,-24(fp)
 20025ac:	00c7c83a 	sub	r3,zero,r3
 20025b0:	10c00015 	stw	r3,0(r2)
      return -1;
 20025b4:	00bfffc4 	movi	r2,-1
 20025b8:	e0bffd15 	stw	r2,-12(fp)
 20025bc:	00000806 	br	20025e0 <close+0xe8>
    }
    return 0;
 20025c0:	e03ffd15 	stw	zero,-12(fp)
 20025c4:	00000606 	br	20025e0 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20025c8:	20025f80 	call	20025f8 <alt_get_errno>
 20025cc:	1007883a 	mov	r3,r2
 20025d0:	00801444 	movi	r2,81
 20025d4:	18800015 	stw	r2,0(r3)
    return -1;
 20025d8:	00bfffc4 	movi	r2,-1
 20025dc:	e0bffd15 	stw	r2,-12(fp)
 20025e0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 20025e4:	e037883a 	mov	sp,fp
 20025e8:	dfc00117 	ldw	ra,4(sp)
 20025ec:	df000017 	ldw	fp,0(sp)
 20025f0:	dec00204 	addi	sp,sp,8
 20025f4:	f800283a 	ret

020025f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20025f8:	defffd04 	addi	sp,sp,-12
 20025fc:	dfc00215 	stw	ra,8(sp)
 2002600:	df000115 	stw	fp,4(sp)
 2002604:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002608:	00808034 	movhi	r2,512
 200260c:	1095f604 	addi	r2,r2,22488
 2002610:	10800017 	ldw	r2,0(r2)
 2002614:	1005003a 	cmpeq	r2,r2,zero
 2002618:	1000061e 	bne	r2,zero,2002634 <alt_get_errno+0x3c>
 200261c:	00808034 	movhi	r2,512
 2002620:	1095f604 	addi	r2,r2,22488
 2002624:	10800017 	ldw	r2,0(r2)
 2002628:	103ee83a 	callr	r2
 200262c:	e0bfff15 	stw	r2,-4(fp)
 2002630:	00000306 	br	2002640 <alt_get_errno+0x48>
 2002634:	00808034 	movhi	r2,512
 2002638:	109bde04 	addi	r2,r2,28536
 200263c:	e0bfff15 	stw	r2,-4(fp)
 2002640:	e0bfff17 	ldw	r2,-4(fp)
}
 2002644:	e037883a 	mov	sp,fp
 2002648:	dfc00117 	ldw	ra,4(sp)
 200264c:	df000017 	ldw	fp,0(sp)
 2002650:	dec00204 	addi	sp,sp,8
 2002654:	f800283a 	ret

02002658 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2002658:	deffff04 	addi	sp,sp,-4
 200265c:	df000015 	stw	fp,0(sp)
 2002660:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2002664:	e037883a 	mov	sp,fp
 2002668:	df000017 	ldw	fp,0(sp)
 200266c:	dec00104 	addi	sp,sp,4
 2002670:	f800283a 	ret

02002674 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2002674:	defffc04 	addi	sp,sp,-16
 2002678:	df000315 	stw	fp,12(sp)
 200267c:	df000304 	addi	fp,sp,12
 2002680:	e13ffd15 	stw	r4,-12(fp)
 2002684:	e17ffe15 	stw	r5,-8(fp)
 2002688:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200268c:	e0bfff17 	ldw	r2,-4(fp)
}
 2002690:	e037883a 	mov	sp,fp
 2002694:	df000017 	ldw	fp,0(sp)
 2002698:	dec00104 	addi	sp,sp,4
 200269c:	f800283a 	ret

020026a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20026a0:	defff904 	addi	sp,sp,-28
 20026a4:	dfc00615 	stw	ra,24(sp)
 20026a8:	df000515 	stw	fp,20(sp)
 20026ac:	df000504 	addi	fp,sp,20
 20026b0:	e13ffd15 	stw	r4,-12(fp)
 20026b4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20026b8:	e0bffd17 	ldw	r2,-12(fp)
 20026bc:	1005003a 	cmpeq	r2,r2,zero
 20026c0:	1000041e 	bne	r2,zero,20026d4 <alt_dev_llist_insert+0x34>
 20026c4:	e0bffd17 	ldw	r2,-12(fp)
 20026c8:	10800217 	ldw	r2,8(r2)
 20026cc:	1004c03a 	cmpne	r2,r2,zero
 20026d0:	1000071e 	bne	r2,zero,20026f0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 20026d4:	20027540 	call	2002754 <alt_get_errno>
 20026d8:	1007883a 	mov	r3,r2
 20026dc:	00800584 	movi	r2,22
 20026e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20026e4:	00bffa84 	movi	r2,-22
 20026e8:	e0bfff15 	stw	r2,-4(fp)
 20026ec:	00001306 	br	200273c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20026f0:	e0fffd17 	ldw	r3,-12(fp)
 20026f4:	e0bffe17 	ldw	r2,-8(fp)
 20026f8:	e0bffb15 	stw	r2,-20(fp)
 20026fc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2002700:	e0fffc17 	ldw	r3,-16(fp)
 2002704:	e0bffb17 	ldw	r2,-20(fp)
 2002708:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200270c:	e0bffb17 	ldw	r2,-20(fp)
 2002710:	10c00017 	ldw	r3,0(r2)
 2002714:	e0bffc17 	ldw	r2,-16(fp)
 2002718:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200271c:	e0bffb17 	ldw	r2,-20(fp)
 2002720:	10c00017 	ldw	r3,0(r2)
 2002724:	e0bffc17 	ldw	r2,-16(fp)
 2002728:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200272c:	e0fffb17 	ldw	r3,-20(fp)
 2002730:	e0bffc17 	ldw	r2,-16(fp)
 2002734:	18800015 	stw	r2,0(r3)

  return 0;  
 2002738:	e03fff15 	stw	zero,-4(fp)
 200273c:	e0bfff17 	ldw	r2,-4(fp)
}
 2002740:	e037883a 	mov	sp,fp
 2002744:	dfc00117 	ldw	ra,4(sp)
 2002748:	df000017 	ldw	fp,0(sp)
 200274c:	dec00204 	addi	sp,sp,8
 2002750:	f800283a 	ret

02002754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002754:	defffd04 	addi	sp,sp,-12
 2002758:	dfc00215 	stw	ra,8(sp)
 200275c:	df000115 	stw	fp,4(sp)
 2002760:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002764:	00808034 	movhi	r2,512
 2002768:	1095f604 	addi	r2,r2,22488
 200276c:	10800017 	ldw	r2,0(r2)
 2002770:	1005003a 	cmpeq	r2,r2,zero
 2002774:	1000061e 	bne	r2,zero,2002790 <alt_get_errno+0x3c>
 2002778:	00808034 	movhi	r2,512
 200277c:	1095f604 	addi	r2,r2,22488
 2002780:	10800017 	ldw	r2,0(r2)
 2002784:	103ee83a 	callr	r2
 2002788:	e0bfff15 	stw	r2,-4(fp)
 200278c:	00000306 	br	200279c <alt_get_errno+0x48>
 2002790:	00808034 	movhi	r2,512
 2002794:	109bde04 	addi	r2,r2,28536
 2002798:	e0bfff15 	stw	r2,-4(fp)
 200279c:	e0bfff17 	ldw	r2,-4(fp)
}
 20027a0:	e037883a 	mov	sp,fp
 20027a4:	dfc00117 	ldw	ra,4(sp)
 20027a8:	df000017 	ldw	fp,0(sp)
 20027ac:	dec00204 	addi	sp,sp,8
 20027b0:	f800283a 	ret

020027b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20027b4:	defffd04 	addi	sp,sp,-12
 20027b8:	dfc00215 	stw	ra,8(sp)
 20027bc:	df000115 	stw	fp,4(sp)
 20027c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20027c4:	00bfff04 	movi	r2,-4
 20027c8:	00c08034 	movhi	r3,512
 20027cc:	18cf7104 	addi	r3,r3,15812
 20027d0:	1885883a 	add	r2,r3,r2
 20027d4:	e0bfff15 	stw	r2,-4(fp)
 20027d8:	00000606 	br	20027f4 <_do_ctors+0x40>
        (*ctor) (); 
 20027dc:	e0bfff17 	ldw	r2,-4(fp)
 20027e0:	10800017 	ldw	r2,0(r2)
 20027e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20027e8:	e0bfff17 	ldw	r2,-4(fp)
 20027ec:	10bfff04 	addi	r2,r2,-4
 20027f0:	e0bfff15 	stw	r2,-4(fp)
 20027f4:	e0ffff17 	ldw	r3,-4(fp)
 20027f8:	00808034 	movhi	r2,512
 20027fc:	108f7004 	addi	r2,r2,15808
 2002800:	18bff62e 	bgeu	r3,r2,20027dc <_do_ctors+0x28>
        (*ctor) (); 
}
 2002804:	e037883a 	mov	sp,fp
 2002808:	dfc00117 	ldw	ra,4(sp)
 200280c:	df000017 	ldw	fp,0(sp)
 2002810:	dec00204 	addi	sp,sp,8
 2002814:	f800283a 	ret

02002818 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2002818:	defffd04 	addi	sp,sp,-12
 200281c:	dfc00215 	stw	ra,8(sp)
 2002820:	df000115 	stw	fp,4(sp)
 2002824:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2002828:	00bfff04 	movi	r2,-4
 200282c:	00c08034 	movhi	r3,512
 2002830:	18cf7104 	addi	r3,r3,15812
 2002834:	1885883a 	add	r2,r3,r2
 2002838:	e0bfff15 	stw	r2,-4(fp)
 200283c:	00000606 	br	2002858 <_do_dtors+0x40>
        (*dtor) (); 
 2002840:	e0bfff17 	ldw	r2,-4(fp)
 2002844:	10800017 	ldw	r2,0(r2)
 2002848:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200284c:	e0bfff17 	ldw	r2,-4(fp)
 2002850:	10bfff04 	addi	r2,r2,-4
 2002854:	e0bfff15 	stw	r2,-4(fp)
 2002858:	e0ffff17 	ldw	r3,-4(fp)
 200285c:	00808034 	movhi	r2,512
 2002860:	108f7104 	addi	r2,r2,15812
 2002864:	18bff62e 	bgeu	r3,r2,2002840 <_do_dtors+0x28>
        (*dtor) (); 
}
 2002868:	e037883a 	mov	sp,fp
 200286c:	dfc00117 	ldw	ra,4(sp)
 2002870:	df000017 	ldw	fp,0(sp)
 2002874:	dec00204 	addi	sp,sp,8
 2002878:	f800283a 	ret

0200287c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200287c:	defffe04 	addi	sp,sp,-8
 2002880:	dfc00115 	stw	ra,4(sp)
 2002884:	df000015 	stw	fp,0(sp)
 2002888:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 200288c:	0009883a 	mov	r4,zero
 2002890:	01440004 	movi	r5,4096
 2002894:	20035f80 	call	20035f8 <alt_icache_flush>
#endif
}
 2002898:	e037883a 	mov	sp,fp
 200289c:	dfc00117 	ldw	ra,4(sp)
 20028a0:	df000017 	ldw	fp,0(sp)
 20028a4:	dec00204 	addi	sp,sp,8
 20028a8:	f800283a 	ret

020028ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20028ac:	defff904 	addi	sp,sp,-28
 20028b0:	dfc00615 	stw	ra,24(sp)
 20028b4:	df000515 	stw	fp,20(sp)
 20028b8:	df000504 	addi	fp,sp,20
 20028bc:	e13ffc15 	stw	r4,-16(fp)
 20028c0:	e17ffd15 	stw	r5,-12(fp)
 20028c4:	e1bffe15 	stw	r6,-8(fp)
 20028c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20028cc:	e0800217 	ldw	r2,8(fp)
 20028d0:	d8800015 	stw	r2,0(sp)
 20028d4:	e13ffc17 	ldw	r4,-16(fp)
 20028d8:	e17ffd17 	ldw	r5,-12(fp)
 20028dc:	e1bffe17 	ldw	r6,-8(fp)
 20028e0:	e1ffff17 	ldw	r7,-4(fp)
 20028e4:	2002a800 	call	2002a80 <alt_iic_isr_register>
}  
 20028e8:	e037883a 	mov	sp,fp
 20028ec:	dfc00117 	ldw	ra,4(sp)
 20028f0:	df000017 	ldw	fp,0(sp)
 20028f4:	dec00204 	addi	sp,sp,8
 20028f8:	f800283a 	ret

020028fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20028fc:	defff904 	addi	sp,sp,-28
 2002900:	df000615 	stw	fp,24(sp)
 2002904:	df000604 	addi	fp,sp,24
 2002908:	e13ffe15 	stw	r4,-8(fp)
 200290c:	e17fff15 	stw	r5,-4(fp)
 2002910:	e0bfff17 	ldw	r2,-4(fp)
 2002914:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002918:	0005303a 	rdctl	r2,status
 200291c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002920:	e0fffb17 	ldw	r3,-20(fp)
 2002924:	00bfff84 	movi	r2,-2
 2002928:	1884703a 	and	r2,r3,r2
 200292c:	1001703a 	wrctl	status,r2
  
  return context;
 2002930:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2002934:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2002938:	e0fffc17 	ldw	r3,-16(fp)
 200293c:	00800044 	movi	r2,1
 2002940:	10c4983a 	sll	r2,r2,r3
 2002944:	1007883a 	mov	r3,r2
 2002948:	00808034 	movhi	r2,512
 200294c:	109bd804 	addi	r2,r2,28512
 2002950:	10800017 	ldw	r2,0(r2)
 2002954:	1886b03a 	or	r3,r3,r2
 2002958:	00808034 	movhi	r2,512
 200295c:	109bd804 	addi	r2,r2,28512
 2002960:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2002964:	00808034 	movhi	r2,512
 2002968:	109bd804 	addi	r2,r2,28512
 200296c:	10800017 	ldw	r2,0(r2)
 2002970:	100170fa 	wrctl	ienable,r2
 2002974:	e0bffd17 	ldw	r2,-12(fp)
 2002978:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200297c:	e0bffa17 	ldw	r2,-24(fp)
 2002980:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2002984:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2002988:	e037883a 	mov	sp,fp
 200298c:	df000017 	ldw	fp,0(sp)
 2002990:	dec00104 	addi	sp,sp,4
 2002994:	f800283a 	ret

02002998 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2002998:	defff904 	addi	sp,sp,-28
 200299c:	df000615 	stw	fp,24(sp)
 20029a0:	df000604 	addi	fp,sp,24
 20029a4:	e13ffe15 	stw	r4,-8(fp)
 20029a8:	e17fff15 	stw	r5,-4(fp)
 20029ac:	e0bfff17 	ldw	r2,-4(fp)
 20029b0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20029b4:	0005303a 	rdctl	r2,status
 20029b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20029bc:	e0fffb17 	ldw	r3,-20(fp)
 20029c0:	00bfff84 	movi	r2,-2
 20029c4:	1884703a 	and	r2,r3,r2
 20029c8:	1001703a 	wrctl	status,r2
  
  return context;
 20029cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20029d0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 20029d4:	e0fffc17 	ldw	r3,-16(fp)
 20029d8:	00800044 	movi	r2,1
 20029dc:	10c4983a 	sll	r2,r2,r3
 20029e0:	0084303a 	nor	r2,zero,r2
 20029e4:	1007883a 	mov	r3,r2
 20029e8:	00808034 	movhi	r2,512
 20029ec:	109bd804 	addi	r2,r2,28512
 20029f0:	10800017 	ldw	r2,0(r2)
 20029f4:	1886703a 	and	r3,r3,r2
 20029f8:	00808034 	movhi	r2,512
 20029fc:	109bd804 	addi	r2,r2,28512
 2002a00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2002a04:	00808034 	movhi	r2,512
 2002a08:	109bd804 	addi	r2,r2,28512
 2002a0c:	10800017 	ldw	r2,0(r2)
 2002a10:	100170fa 	wrctl	ienable,r2
 2002a14:	e0bffd17 	ldw	r2,-12(fp)
 2002a18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002a1c:	e0bffa17 	ldw	r2,-24(fp)
 2002a20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2002a24:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2002a28:	e037883a 	mov	sp,fp
 2002a2c:	df000017 	ldw	fp,0(sp)
 2002a30:	dec00104 	addi	sp,sp,4
 2002a34:	f800283a 	ret

02002a38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2002a38:	defffc04 	addi	sp,sp,-16
 2002a3c:	df000315 	stw	fp,12(sp)
 2002a40:	df000304 	addi	fp,sp,12
 2002a44:	e13ffe15 	stw	r4,-8(fp)
 2002a48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2002a4c:	000530fa 	rdctl	r2,ienable
 2002a50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2002a54:	e0ffff17 	ldw	r3,-4(fp)
 2002a58:	00800044 	movi	r2,1
 2002a5c:	10c4983a 	sll	r2,r2,r3
 2002a60:	1007883a 	mov	r3,r2
 2002a64:	e0bffd17 	ldw	r2,-12(fp)
 2002a68:	1884703a 	and	r2,r3,r2
 2002a6c:	1004c03a 	cmpne	r2,r2,zero
}
 2002a70:	e037883a 	mov	sp,fp
 2002a74:	df000017 	ldw	fp,0(sp)
 2002a78:	dec00104 	addi	sp,sp,4
 2002a7c:	f800283a 	ret

02002a80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2002a80:	defff404 	addi	sp,sp,-48
 2002a84:	dfc00b15 	stw	ra,44(sp)
 2002a88:	df000a15 	stw	fp,40(sp)
 2002a8c:	df000a04 	addi	fp,sp,40
 2002a90:	e13ffb15 	stw	r4,-20(fp)
 2002a94:	e17ffc15 	stw	r5,-16(fp)
 2002a98:	e1bffd15 	stw	r6,-12(fp)
 2002a9c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2002aa0:	00bffa84 	movi	r2,-22
 2002aa4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2002aa8:	e0bffc17 	ldw	r2,-16(fp)
 2002aac:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2002ab0:	e0bff917 	ldw	r2,-28(fp)
 2002ab4:	10800808 	cmpgei	r2,r2,32
 2002ab8:	1000291e 	bne	r2,zero,2002b60 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002abc:	0005303a 	rdctl	r2,status
 2002ac0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002ac4:	e0fff717 	ldw	r3,-36(fp)
 2002ac8:	00bfff84 	movi	r2,-2
 2002acc:	1884703a 	and	r2,r3,r2
 2002ad0:	1001703a 	wrctl	status,r2
  
  return context;
 2002ad4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2002ad8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 2002adc:	e0bff917 	ldw	r2,-28(fp)
 2002ae0:	00c08034 	movhi	r3,512
 2002ae4:	18dbdf04 	addi	r3,r3,28540
 2002ae8:	100490fa 	slli	r2,r2,3
 2002aec:	10c7883a 	add	r3,r2,r3
 2002af0:	e0bffd17 	ldw	r2,-12(fp)
 2002af4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2002af8:	e0bff917 	ldw	r2,-28(fp)
 2002afc:	00c08034 	movhi	r3,512
 2002b00:	18dbdf04 	addi	r3,r3,28540
 2002b04:	100490fa 	slli	r2,r2,3
 2002b08:	10c5883a 	add	r2,r2,r3
 2002b0c:	10c00104 	addi	r3,r2,4
 2002b10:	e0bffe17 	ldw	r2,-8(fp)
 2002b14:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2002b18:	e0bffd17 	ldw	r2,-12(fp)
 2002b1c:	1005003a 	cmpeq	r2,r2,zero
 2002b20:	1000051e 	bne	r2,zero,2002b38 <alt_iic_isr_register+0xb8>
 2002b24:	e17ff917 	ldw	r5,-28(fp)
 2002b28:	e13ffb17 	ldw	r4,-20(fp)
 2002b2c:	20028fc0 	call	20028fc <alt_ic_irq_enable>
 2002b30:	e0bfff15 	stw	r2,-4(fp)
 2002b34:	00000406 	br	2002b48 <alt_iic_isr_register+0xc8>
 2002b38:	e17ff917 	ldw	r5,-28(fp)
 2002b3c:	e13ffb17 	ldw	r4,-20(fp)
 2002b40:	20029980 	call	2002998 <alt_ic_irq_disable>
 2002b44:	e0bfff15 	stw	r2,-4(fp)
 2002b48:	e0bfff17 	ldw	r2,-4(fp)
 2002b4c:	e0bffa15 	stw	r2,-24(fp)
 2002b50:	e0bff817 	ldw	r2,-32(fp)
 2002b54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002b58:	e0bff617 	ldw	r2,-40(fp)
 2002b5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2002b60:	e0bffa17 	ldw	r2,-24(fp)
}
 2002b64:	e037883a 	mov	sp,fp
 2002b68:	dfc00117 	ldw	ra,4(sp)
 2002b6c:	df000017 	ldw	fp,0(sp)
 2002b70:	dec00204 	addi	sp,sp,8
 2002b74:	f800283a 	ret

02002b78 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2002b78:	defff804 	addi	sp,sp,-32
 2002b7c:	dfc00715 	stw	ra,28(sp)
 2002b80:	df000615 	stw	fp,24(sp)
 2002b84:	dc000515 	stw	r16,20(sp)
 2002b88:	df000504 	addi	fp,sp,20
 2002b8c:	e13ffc15 	stw	r4,-16(fp)
 2002b90:	e17ffd15 	stw	r5,-12(fp)
 2002b94:	e1bffe15 	stw	r6,-8(fp)
 2002b98:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2002b9c:	e13ffd17 	ldw	r4,-12(fp)
 2002ba0:	e17ffe17 	ldw	r5,-8(fp)
 2002ba4:	e1bfff17 	ldw	r6,-4(fp)
 2002ba8:	2002dc00 	call	2002dc0 <open>
 2002bac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2002bb0:	e0bffb17 	ldw	r2,-20(fp)
 2002bb4:	1004803a 	cmplt	r2,r2,zero
 2002bb8:	10001f1e 	bne	r2,zero,2002c38 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 2002bbc:	e13ffb17 	ldw	r4,-20(fp)
 2002bc0:	04008034 	movhi	r16,512
 2002bc4:	84148f04 	addi	r16,r16,21052
 2002bc8:	01400304 	movi	r5,12
 2002bcc:	2003d280 	call	2003d28 <__mulsi3>
 2002bd0:	1405883a 	add	r2,r2,r16
 2002bd4:	10c00017 	ldw	r3,0(r2)
 2002bd8:	e0bffc17 	ldw	r2,-16(fp)
 2002bdc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2002be0:	e13ffb17 	ldw	r4,-20(fp)
 2002be4:	04008034 	movhi	r16,512
 2002be8:	84148f04 	addi	r16,r16,21052
 2002bec:	01400304 	movi	r5,12
 2002bf0:	2003d280 	call	2003d28 <__mulsi3>
 2002bf4:	1405883a 	add	r2,r2,r16
 2002bf8:	10800104 	addi	r2,r2,4
 2002bfc:	10c00017 	ldw	r3,0(r2)
 2002c00:	e0bffc17 	ldw	r2,-16(fp)
 2002c04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2002c08:	e13ffb17 	ldw	r4,-20(fp)
 2002c0c:	04008034 	movhi	r16,512
 2002c10:	84148f04 	addi	r16,r16,21052
 2002c14:	01400304 	movi	r5,12
 2002c18:	2003d280 	call	2003d28 <__mulsi3>
 2002c1c:	1405883a 	add	r2,r2,r16
 2002c20:	10800204 	addi	r2,r2,8
 2002c24:	10c00017 	ldw	r3,0(r2)
 2002c28:	e0bffc17 	ldw	r2,-16(fp)
 2002c2c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2002c30:	e13ffb17 	ldw	r4,-20(fp)
 2002c34:	2002fac0 	call	2002fac <alt_release_fd>
  }
} 
 2002c38:	e037883a 	mov	sp,fp
 2002c3c:	dfc00217 	ldw	ra,8(sp)
 2002c40:	df000117 	ldw	fp,4(sp)
 2002c44:	dc000017 	ldw	r16,0(sp)
 2002c48:	dec00304 	addi	sp,sp,12
 2002c4c:	f800283a 	ret

02002c50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2002c50:	defffb04 	addi	sp,sp,-20
 2002c54:	dfc00415 	stw	ra,16(sp)
 2002c58:	df000315 	stw	fp,12(sp)
 2002c5c:	df000304 	addi	fp,sp,12
 2002c60:	e13ffd15 	stw	r4,-12(fp)
 2002c64:	e17ffe15 	stw	r5,-8(fp)
 2002c68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2002c6c:	01008034 	movhi	r4,512
 2002c70:	21149204 	addi	r4,r4,21064
 2002c74:	e17ffd17 	ldw	r5,-12(fp)
 2002c78:	01800044 	movi	r6,1
 2002c7c:	01c07fc4 	movi	r7,511
 2002c80:	2002b780 	call	2002b78 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2002c84:	01008034 	movhi	r4,512
 2002c88:	21148f04 	addi	r4,r4,21052
 2002c8c:	e17ffe17 	ldw	r5,-8(fp)
 2002c90:	000d883a 	mov	r6,zero
 2002c94:	01c07fc4 	movi	r7,511
 2002c98:	2002b780 	call	2002b78 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2002c9c:	01008034 	movhi	r4,512
 2002ca0:	21149504 	addi	r4,r4,21076
 2002ca4:	e17fff17 	ldw	r5,-4(fp)
 2002ca8:	01800044 	movi	r6,1
 2002cac:	01c07fc4 	movi	r7,511
 2002cb0:	2002b780 	call	2002b78 <alt_open_fd>
}  
 2002cb4:	e037883a 	mov	sp,fp
 2002cb8:	dfc00117 	ldw	ra,4(sp)
 2002cbc:	df000017 	ldw	fp,0(sp)
 2002cc0:	dec00204 	addi	sp,sp,8
 2002cc4:	f800283a 	ret

02002cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2002cc8:	defffa04 	addi	sp,sp,-24
 2002ccc:	dfc00515 	stw	ra,20(sp)
 2002cd0:	df000415 	stw	fp,16(sp)
 2002cd4:	dc000315 	stw	r16,12(sp)
 2002cd8:	df000304 	addi	fp,sp,12
 2002cdc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2002ce0:	e0bffe17 	ldw	r2,-8(fp)
 2002ce4:	10800217 	ldw	r2,8(r2)
 2002ce8:	10d00034 	orhi	r3,r2,16384
 2002cec:	e0bffe17 	ldw	r2,-8(fp)
 2002cf0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2002cf4:	e03ffd15 	stw	zero,-12(fp)
 2002cf8:	00002306 	br	2002d88 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2002cfc:	e13ffd17 	ldw	r4,-12(fp)
 2002d00:	04008034 	movhi	r16,512
 2002d04:	84148f04 	addi	r16,r16,21052
 2002d08:	01400304 	movi	r5,12
 2002d0c:	2003d280 	call	2003d28 <__mulsi3>
 2002d10:	1405883a 	add	r2,r2,r16
 2002d14:	10c00017 	ldw	r3,0(r2)
 2002d18:	e0bffe17 	ldw	r2,-8(fp)
 2002d1c:	10800017 	ldw	r2,0(r2)
 2002d20:	1880161e 	bne	r3,r2,2002d7c <alt_file_locked+0xb4>
 2002d24:	e13ffd17 	ldw	r4,-12(fp)
 2002d28:	04008034 	movhi	r16,512
 2002d2c:	84148f04 	addi	r16,r16,21052
 2002d30:	01400304 	movi	r5,12
 2002d34:	2003d280 	call	2003d28 <__mulsi3>
 2002d38:	1405883a 	add	r2,r2,r16
 2002d3c:	10800204 	addi	r2,r2,8
 2002d40:	10800017 	ldw	r2,0(r2)
 2002d44:	1004403a 	cmpge	r2,r2,zero
 2002d48:	10000c1e 	bne	r2,zero,2002d7c <alt_file_locked+0xb4>
 2002d4c:	e13ffd17 	ldw	r4,-12(fp)
 2002d50:	01400304 	movi	r5,12
 2002d54:	2003d280 	call	2003d28 <__mulsi3>
 2002d58:	1007883a 	mov	r3,r2
 2002d5c:	00808034 	movhi	r2,512
 2002d60:	10948f04 	addi	r2,r2,21052
 2002d64:	1887883a 	add	r3,r3,r2
 2002d68:	e0bffe17 	ldw	r2,-8(fp)
 2002d6c:	18800326 	beq	r3,r2,2002d7c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2002d70:	00bffcc4 	movi	r2,-13
 2002d74:	e0bfff15 	stw	r2,-4(fp)
 2002d78:	00000a06 	br	2002da4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2002d7c:	e0bffd17 	ldw	r2,-12(fp)
 2002d80:	10800044 	addi	r2,r2,1
 2002d84:	e0bffd15 	stw	r2,-12(fp)
 2002d88:	00808034 	movhi	r2,512
 2002d8c:	1095f504 	addi	r2,r2,22484
 2002d90:	10800017 	ldw	r2,0(r2)
 2002d94:	1007883a 	mov	r3,r2
 2002d98:	e0bffd17 	ldw	r2,-12(fp)
 2002d9c:	18bfd72e 	bgeu	r3,r2,2002cfc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2002da0:	e03fff15 	stw	zero,-4(fp)
 2002da4:	e0bfff17 	ldw	r2,-4(fp)
}
 2002da8:	e037883a 	mov	sp,fp
 2002dac:	dfc00217 	ldw	ra,8(sp)
 2002db0:	df000117 	ldw	fp,4(sp)
 2002db4:	dc000017 	ldw	r16,0(sp)
 2002db8:	dec00304 	addi	sp,sp,12
 2002dbc:	f800283a 	ret

02002dc0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2002dc0:	defff404 	addi	sp,sp,-48
 2002dc4:	dfc00b15 	stw	ra,44(sp)
 2002dc8:	df000a15 	stw	fp,40(sp)
 2002dcc:	df000a04 	addi	fp,sp,40
 2002dd0:	e13ffb15 	stw	r4,-20(fp)
 2002dd4:	e17ffc15 	stw	r5,-16(fp)
 2002dd8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2002ddc:	00bfffc4 	movi	r2,-1
 2002de0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2002de4:	00bffb44 	movi	r2,-19
 2002de8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2002dec:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2002df0:	e13ffb17 	ldw	r4,-20(fp)
 2002df4:	01408034 	movhi	r5,512
 2002df8:	2955f304 	addi	r5,r5,22476
 2002dfc:	20033740 	call	2003374 <alt_find_dev>
 2002e00:	e0bffa15 	stw	r2,-24(fp)
 2002e04:	e0bffa17 	ldw	r2,-24(fp)
 2002e08:	1004c03a 	cmpne	r2,r2,zero
 2002e0c:	1000051e 	bne	r2,zero,2002e24 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2002e10:	e13ffb17 	ldw	r4,-20(fp)
 2002e14:	20034080 	call	2003408 <alt_find_file>
 2002e18:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2002e1c:	00800044 	movi	r2,1
 2002e20:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2002e24:	e0bffa17 	ldw	r2,-24(fp)
 2002e28:	1005003a 	cmpeq	r2,r2,zero
 2002e2c:	1000311e 	bne	r2,zero,2002ef4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2002e30:	e13ffa17 	ldw	r4,-24(fp)
 2002e34:	20035280 	call	2003528 <alt_get_fd>
 2002e38:	e0bff815 	stw	r2,-32(fp)
 2002e3c:	e0bff817 	ldw	r2,-32(fp)
 2002e40:	1004403a 	cmpge	r2,r2,zero
 2002e44:	1000031e 	bne	r2,zero,2002e54 <open+0x94>
    {
      status = index;
 2002e48:	e0bff817 	ldw	r2,-32(fp)
 2002e4c:	e0bff715 	stw	r2,-36(fp)
 2002e50:	00002a06 	br	2002efc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 2002e54:	e13ff817 	ldw	r4,-32(fp)
 2002e58:	01400304 	movi	r5,12
 2002e5c:	2003d280 	call	2003d28 <__mulsi3>
 2002e60:	1007883a 	mov	r3,r2
 2002e64:	00808034 	movhi	r2,512
 2002e68:	10948f04 	addi	r2,r2,21052
 2002e6c:	1885883a 	add	r2,r3,r2
 2002e70:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2002e74:	e0fffc17 	ldw	r3,-16(fp)
 2002e78:	00900034 	movhi	r2,16384
 2002e7c:	10bfffc4 	addi	r2,r2,-1
 2002e80:	1886703a 	and	r3,r3,r2
 2002e84:	e0bff917 	ldw	r2,-28(fp)
 2002e88:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2002e8c:	e0bff617 	ldw	r2,-40(fp)
 2002e90:	1004c03a 	cmpne	r2,r2,zero
 2002e94:	1000061e 	bne	r2,zero,2002eb0 <open+0xf0>
 2002e98:	e13ff917 	ldw	r4,-28(fp)
 2002e9c:	2002cc80 	call	2002cc8 <alt_file_locked>
 2002ea0:	e0bff715 	stw	r2,-36(fp)
 2002ea4:	e0bff717 	ldw	r2,-36(fp)
 2002ea8:	1004803a 	cmplt	r2,r2,zero
 2002eac:	1000131e 	bne	r2,zero,2002efc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2002eb0:	e0bffa17 	ldw	r2,-24(fp)
 2002eb4:	10800317 	ldw	r2,12(r2)
 2002eb8:	1005003a 	cmpeq	r2,r2,zero
 2002ebc:	1000091e 	bne	r2,zero,2002ee4 <open+0x124>
 2002ec0:	e0bffa17 	ldw	r2,-24(fp)
 2002ec4:	10800317 	ldw	r2,12(r2)
 2002ec8:	e13ff917 	ldw	r4,-28(fp)
 2002ecc:	e17ffb17 	ldw	r5,-20(fp)
 2002ed0:	e1bffc17 	ldw	r6,-16(fp)
 2002ed4:	e1fffd17 	ldw	r7,-12(fp)
 2002ed8:	103ee83a 	callr	r2
 2002edc:	e0bfff15 	stw	r2,-4(fp)
 2002ee0:	00000106 	br	2002ee8 <open+0x128>
 2002ee4:	e03fff15 	stw	zero,-4(fp)
 2002ee8:	e0bfff17 	ldw	r2,-4(fp)
 2002eec:	e0bff715 	stw	r2,-36(fp)
 2002ef0:	00000206 	br	2002efc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2002ef4:	00bffb44 	movi	r2,-19
 2002ef8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2002efc:	e0bff717 	ldw	r2,-36(fp)
 2002f00:	1004403a 	cmpge	r2,r2,zero
 2002f04:	1000091e 	bne	r2,zero,2002f2c <open+0x16c>
  {
    alt_release_fd (index);  
 2002f08:	e13ff817 	ldw	r4,-32(fp)
 2002f0c:	2002fac0 	call	2002fac <alt_release_fd>
    ALT_ERRNO = -status;
 2002f10:	2002f4c0 	call	2002f4c <alt_get_errno>
 2002f14:	e0fff717 	ldw	r3,-36(fp)
 2002f18:	00c7c83a 	sub	r3,zero,r3
 2002f1c:	10c00015 	stw	r3,0(r2)
    return -1;
 2002f20:	00bfffc4 	movi	r2,-1
 2002f24:	e0bffe15 	stw	r2,-8(fp)
 2002f28:	00000206 	br	2002f34 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 2002f2c:	e0bff817 	ldw	r2,-32(fp)
 2002f30:	e0bffe15 	stw	r2,-8(fp)
 2002f34:	e0bffe17 	ldw	r2,-8(fp)
}
 2002f38:	e037883a 	mov	sp,fp
 2002f3c:	dfc00117 	ldw	ra,4(sp)
 2002f40:	df000017 	ldw	fp,0(sp)
 2002f44:	dec00204 	addi	sp,sp,8
 2002f48:	f800283a 	ret

02002f4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002f4c:	defffd04 	addi	sp,sp,-12
 2002f50:	dfc00215 	stw	ra,8(sp)
 2002f54:	df000115 	stw	fp,4(sp)
 2002f58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2002f5c:	00808034 	movhi	r2,512
 2002f60:	1095f604 	addi	r2,r2,22488
 2002f64:	10800017 	ldw	r2,0(r2)
 2002f68:	1005003a 	cmpeq	r2,r2,zero
 2002f6c:	1000061e 	bne	r2,zero,2002f88 <alt_get_errno+0x3c>
 2002f70:	00808034 	movhi	r2,512
 2002f74:	1095f604 	addi	r2,r2,22488
 2002f78:	10800017 	ldw	r2,0(r2)
 2002f7c:	103ee83a 	callr	r2
 2002f80:	e0bfff15 	stw	r2,-4(fp)
 2002f84:	00000306 	br	2002f94 <alt_get_errno+0x48>
 2002f88:	00808034 	movhi	r2,512
 2002f8c:	109bde04 	addi	r2,r2,28536
 2002f90:	e0bfff15 	stw	r2,-4(fp)
 2002f94:	e0bfff17 	ldw	r2,-4(fp)
}
 2002f98:	e037883a 	mov	sp,fp
 2002f9c:	dfc00117 	ldw	ra,4(sp)
 2002fa0:	df000017 	ldw	fp,0(sp)
 2002fa4:	dec00204 	addi	sp,sp,8
 2002fa8:	f800283a 	ret

02002fac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2002fac:	defffc04 	addi	sp,sp,-16
 2002fb0:	dfc00315 	stw	ra,12(sp)
 2002fb4:	df000215 	stw	fp,8(sp)
 2002fb8:	dc000115 	stw	r16,4(sp)
 2002fbc:	df000104 	addi	fp,sp,4
 2002fc0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2002fc4:	e0bfff17 	ldw	r2,-4(fp)
 2002fc8:	108000d0 	cmplti	r2,r2,3
 2002fcc:	10000f1e 	bne	r2,zero,200300c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 2002fd0:	e13fff17 	ldw	r4,-4(fp)
 2002fd4:	04008034 	movhi	r16,512
 2002fd8:	84148f04 	addi	r16,r16,21052
 2002fdc:	01400304 	movi	r5,12
 2002fe0:	2003d280 	call	2003d28 <__mulsi3>
 2002fe4:	1405883a 	add	r2,r2,r16
 2002fe8:	10800204 	addi	r2,r2,8
 2002fec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2002ff0:	e13fff17 	ldw	r4,-4(fp)
 2002ff4:	04008034 	movhi	r16,512
 2002ff8:	84148f04 	addi	r16,r16,21052
 2002ffc:	01400304 	movi	r5,12
 2003000:	2003d280 	call	2003d28 <__mulsi3>
 2003004:	1405883a 	add	r2,r2,r16
 2003008:	10000015 	stw	zero,0(r2)
  }
}
 200300c:	e037883a 	mov	sp,fp
 2003010:	dfc00217 	ldw	ra,8(sp)
 2003014:	df000117 	ldw	fp,4(sp)
 2003018:	dc000017 	ldw	r16,0(sp)
 200301c:	dec00304 	addi	sp,sp,12
 2003020:	f800283a 	ret

02003024 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2003024:	defffa04 	addi	sp,sp,-24
 2003028:	df000515 	stw	fp,20(sp)
 200302c:	df000504 	addi	fp,sp,20
 2003030:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003034:	0005303a 	rdctl	r2,status
 2003038:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200303c:	e0fffd17 	ldw	r3,-12(fp)
 2003040:	00bfff84 	movi	r2,-2
 2003044:	1884703a 	and	r2,r3,r2
 2003048:	1001703a 	wrctl	status,r2
  
  return context;
 200304c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2003050:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2003054:	e0bfff17 	ldw	r2,-4(fp)
 2003058:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200305c:	e0bffc17 	ldw	r2,-16(fp)
 2003060:	10c00017 	ldw	r3,0(r2)
 2003064:	e0bffc17 	ldw	r2,-16(fp)
 2003068:	10800117 	ldw	r2,4(r2)
 200306c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2003070:	e0bffc17 	ldw	r2,-16(fp)
 2003074:	10c00117 	ldw	r3,4(r2)
 2003078:	e0bffc17 	ldw	r2,-16(fp)
 200307c:	10800017 	ldw	r2,0(r2)
 2003080:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2003084:	e0fffc17 	ldw	r3,-16(fp)
 2003088:	e0bffc17 	ldw	r2,-16(fp)
 200308c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2003090:	e0fffc17 	ldw	r3,-16(fp)
 2003094:	e0bffc17 	ldw	r2,-16(fp)
 2003098:	18800015 	stw	r2,0(r3)
 200309c:	e0bffe17 	ldw	r2,-8(fp)
 20030a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20030a4:	e0bffb17 	ldw	r2,-20(fp)
 20030a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20030ac:	e037883a 	mov	sp,fp
 20030b0:	df000017 	ldw	fp,0(sp)
 20030b4:	dec00104 	addi	sp,sp,4
 20030b8:	f800283a 	ret

020030bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20030bc:	defffb04 	addi	sp,sp,-20
 20030c0:	dfc00415 	stw	ra,16(sp)
 20030c4:	df000315 	stw	fp,12(sp)
 20030c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20030cc:	d0a00817 	ldw	r2,-32736(gp)
 20030d0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20030d4:	d0a5ee17 	ldw	r2,-26696(gp)
 20030d8:	10800044 	addi	r2,r2,1
 20030dc:	d0a5ee15 	stw	r2,-26696(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20030e0:	00003106 	br	20031a8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 20030e4:	e0bffe17 	ldw	r2,-8(fp)
 20030e8:	10800017 	ldw	r2,0(r2)
 20030ec:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 20030f0:	e0bffe17 	ldw	r2,-8(fp)
 20030f4:	10800403 	ldbu	r2,16(r2)
 20030f8:	10803fcc 	andi	r2,r2,255
 20030fc:	1005003a 	cmpeq	r2,r2,zero
 2003100:	1000051e 	bne	r2,zero,2003118 <alt_tick+0x5c>
 2003104:	d0a5ee17 	ldw	r2,-26696(gp)
 2003108:	1004c03a 	cmpne	r2,r2,zero
 200310c:	1000021e 	bne	r2,zero,2003118 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2003110:	e0bffe17 	ldw	r2,-8(fp)
 2003114:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2003118:	e0bffe17 	ldw	r2,-8(fp)
 200311c:	10c00217 	ldw	r3,8(r2)
 2003120:	d0a5ee17 	ldw	r2,-26696(gp)
 2003124:	10c01e36 	bltu	r2,r3,20031a0 <alt_tick+0xe4>
 2003128:	e0bffe17 	ldw	r2,-8(fp)
 200312c:	10800403 	ldbu	r2,16(r2)
 2003130:	10803fcc 	andi	r2,r2,255
 2003134:	1004c03a 	cmpne	r2,r2,zero
 2003138:	1000191e 	bne	r2,zero,20031a0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 200313c:	e0bffe17 	ldw	r2,-8(fp)
 2003140:	10c00317 	ldw	r3,12(r2)
 2003144:	e0bffe17 	ldw	r2,-8(fp)
 2003148:	11000517 	ldw	r4,20(r2)
 200314c:	183ee83a 	callr	r3
 2003150:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2003154:	e0bffd17 	ldw	r2,-12(fp)
 2003158:	1004c03a 	cmpne	r2,r2,zero
 200315c:	1000031e 	bne	r2,zero,200316c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2003160:	e13ffe17 	ldw	r4,-8(fp)
 2003164:	20030240 	call	2003024 <alt_alarm_stop>
 2003168:	00000d06 	br	20031a0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 200316c:	e0bffe17 	ldw	r2,-8(fp)
 2003170:	10c00217 	ldw	r3,8(r2)
 2003174:	e0bffd17 	ldw	r2,-12(fp)
 2003178:	1887883a 	add	r3,r3,r2
 200317c:	e0bffe17 	ldw	r2,-8(fp)
 2003180:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2003184:	e0bffe17 	ldw	r2,-8(fp)
 2003188:	10c00217 	ldw	r3,8(r2)
 200318c:	d0a5ee17 	ldw	r2,-26696(gp)
 2003190:	1880032e 	bgeu	r3,r2,20031a0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2003194:	e0fffe17 	ldw	r3,-8(fp)
 2003198:	00800044 	movi	r2,1
 200319c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 20031a0:	e0bfff17 	ldw	r2,-4(fp)
 20031a4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20031a8:	d0e00804 	addi	r3,gp,-32736
 20031ac:	e0bffe17 	ldw	r2,-8(fp)
 20031b0:	10ffcc1e 	bne	r2,r3,20030e4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 20031b4:	e037883a 	mov	sp,fp
 20031b8:	dfc00117 	ldw	ra,4(sp)
 20031bc:	df000017 	ldw	fp,0(sp)
 20031c0:	dec00204 	addi	sp,sp,8
 20031c4:	f800283a 	ret

020031c8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 20031c8:	defffd04 	addi	sp,sp,-12
 20031cc:	dfc00215 	stw	ra,8(sp)
 20031d0:	df000115 	stw	fp,4(sp)
 20031d4:	df000104 	addi	fp,sp,4
 20031d8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 20031dc:	e13fff17 	ldw	r4,-4(fp)
 20031e0:	20032180 	call	2003218 <alt_busy_sleep>
}
 20031e4:	e037883a 	mov	sp,fp
 20031e8:	dfc00117 	ldw	ra,4(sp)
 20031ec:	df000017 	ldw	fp,0(sp)
 20031f0:	dec00204 	addi	sp,sp,8
 20031f4:	f800283a 	ret

020031f8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 20031f8:	deffff04 	addi	sp,sp,-4
 20031fc:	df000015 	stw	fp,0(sp)
 2003200:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2003204:	000170fa 	wrctl	ienable,zero
}
 2003208:	e037883a 	mov	sp,fp
 200320c:	df000017 	ldw	fp,0(sp)
 2003210:	dec00104 	addi	sp,sp,4
 2003214:	f800283a 	ret

02003218 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2003218:	defffa04 	addi	sp,sp,-24
 200321c:	dfc00515 	stw	ra,20(sp)
 2003220:	df000415 	stw	fp,16(sp)
 2003224:	df000404 	addi	fp,sp,16
 2003228:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 200322c:	008000c4 	movi	r2,3
 2003230:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 2003234:	e13ffc17 	ldw	r4,-16(fp)
 2003238:	014003f4 	movhi	r5,15
 200323c:	29509004 	addi	r5,r5,16960
 2003240:	2003d280 	call	2003d28 <__mulsi3>
 2003244:	100b883a 	mov	r5,r2
 2003248:	0100bef4 	movhi	r4,763
 200324c:	213c2004 	addi	r4,r4,-3968
 2003250:	2003d180 	call	2003d18 <__udivsi3>
 2003254:	100b883a 	mov	r5,r2
 2003258:	01200034 	movhi	r4,32768
 200325c:	213fffc4 	addi	r4,r4,-1
 2003260:	2003d180 	call	2003d18 <__udivsi3>
 2003264:	100b883a 	mov	r5,r2
 2003268:	e13fff17 	ldw	r4,-4(fp)
 200326c:	2003d180 	call	2003d18 <__udivsi3>
 2003270:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2003274:	e0bffd17 	ldw	r2,-12(fp)
 2003278:	1005003a 	cmpeq	r2,r2,zero
 200327c:	10002a1e 	bne	r2,zero,2003328 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 2003280:	e03ffe15 	stw	zero,-8(fp)
 2003284:	00001706 	br	20032e4 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2003288:	00a00034 	movhi	r2,32768
 200328c:	10bfffc4 	addi	r2,r2,-1
 2003290:	10bfffc4 	addi	r2,r2,-1
 2003294:	103ffe1e 	bne	r2,zero,2003290 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2003298:	e13ffc17 	ldw	r4,-16(fp)
 200329c:	014003f4 	movhi	r5,15
 20032a0:	29509004 	addi	r5,r5,16960
 20032a4:	2003d280 	call	2003d28 <__mulsi3>
 20032a8:	100b883a 	mov	r5,r2
 20032ac:	0100bef4 	movhi	r4,763
 20032b0:	213c2004 	addi	r4,r4,-3968
 20032b4:	2003d180 	call	2003d18 <__udivsi3>
 20032b8:	100b883a 	mov	r5,r2
 20032bc:	01200034 	movhi	r4,32768
 20032c0:	213fffc4 	addi	r4,r4,-1
 20032c4:	2003d180 	call	2003d18 <__udivsi3>
 20032c8:	1007883a 	mov	r3,r2
 20032cc:	e0bfff17 	ldw	r2,-4(fp)
 20032d0:	10c5c83a 	sub	r2,r2,r3
 20032d4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 20032d8:	e0bffe17 	ldw	r2,-8(fp)
 20032dc:	10800044 	addi	r2,r2,1
 20032e0:	e0bffe15 	stw	r2,-8(fp)
 20032e4:	e0fffe17 	ldw	r3,-8(fp)
 20032e8:	e0bffd17 	ldw	r2,-12(fp)
 20032ec:	18bfe616 	blt	r3,r2,2003288 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 20032f0:	e13ffc17 	ldw	r4,-16(fp)
 20032f4:	014003f4 	movhi	r5,15
 20032f8:	29509004 	addi	r5,r5,16960
 20032fc:	2003d280 	call	2003d28 <__mulsi3>
 2003300:	100b883a 	mov	r5,r2
 2003304:	0100bef4 	movhi	r4,763
 2003308:	213c2004 	addi	r4,r4,-3968
 200330c:	2003d180 	call	2003d18 <__udivsi3>
 2003310:	1009883a 	mov	r4,r2
 2003314:	e17fff17 	ldw	r5,-4(fp)
 2003318:	2003d280 	call	2003d28 <__mulsi3>
 200331c:	10bfffc4 	addi	r2,r2,-1
 2003320:	103ffe1e 	bne	r2,zero,200331c <alt_busy_sleep+0x104>
 2003324:	00000d06 	br	200335c <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2003328:	e13ffc17 	ldw	r4,-16(fp)
 200332c:	014003f4 	movhi	r5,15
 2003330:	29509004 	addi	r5,r5,16960
 2003334:	2003d280 	call	2003d28 <__mulsi3>
 2003338:	100b883a 	mov	r5,r2
 200333c:	0100bef4 	movhi	r4,763
 2003340:	213c2004 	addi	r4,r4,-3968
 2003344:	2003d180 	call	2003d18 <__udivsi3>
 2003348:	1009883a 	mov	r4,r2
 200334c:	e17fff17 	ldw	r5,-4(fp)
 2003350:	2003d280 	call	2003d28 <__mulsi3>
 2003354:	10bfffc4 	addi	r2,r2,-1
 2003358:	00bffe16 	blt	zero,r2,2003354 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 200335c:	0005883a 	mov	r2,zero
}
 2003360:	e037883a 	mov	sp,fp
 2003364:	dfc00117 	ldw	ra,4(sp)
 2003368:	df000017 	ldw	fp,0(sp)
 200336c:	dec00204 	addi	sp,sp,8
 2003370:	f800283a 	ret

02003374 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2003374:	defff904 	addi	sp,sp,-28
 2003378:	dfc00615 	stw	ra,24(sp)
 200337c:	df000515 	stw	fp,20(sp)
 2003380:	df000504 	addi	fp,sp,20
 2003384:	e13ffd15 	stw	r4,-12(fp)
 2003388:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200338c:	e0bffe17 	ldw	r2,-8(fp)
 2003390:	10800017 	ldw	r2,0(r2)
 2003394:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2003398:	e13ffd17 	ldw	r4,-12(fp)
 200339c:	20038800 	call	2003880 <strlen>
 20033a0:	10800044 	addi	r2,r2,1
 20033a4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20033a8:	00000d06 	br	20033e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20033ac:	e0bffc17 	ldw	r2,-16(fp)
 20033b0:	11000217 	ldw	r4,8(r2)
 20033b4:	e1bffb17 	ldw	r6,-20(fp)
 20033b8:	e17ffd17 	ldw	r5,-12(fp)
 20033bc:	20036d40 	call	20036d4 <memcmp>
 20033c0:	1004c03a 	cmpne	r2,r2,zero
 20033c4:	1000031e 	bne	r2,zero,20033d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20033c8:	e0bffc17 	ldw	r2,-16(fp)
 20033cc:	e0bfff15 	stw	r2,-4(fp)
 20033d0:	00000706 	br	20033f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20033d4:	e0bffc17 	ldw	r2,-16(fp)
 20033d8:	10800017 	ldw	r2,0(r2)
 20033dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20033e0:	e0fffe17 	ldw	r3,-8(fp)
 20033e4:	e0bffc17 	ldw	r2,-16(fp)
 20033e8:	10fff01e 	bne	r2,r3,20033ac <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20033ec:	e03fff15 	stw	zero,-4(fp)
 20033f0:	e0bfff17 	ldw	r2,-4(fp)
}
 20033f4:	e037883a 	mov	sp,fp
 20033f8:	dfc00117 	ldw	ra,4(sp)
 20033fc:	df000017 	ldw	fp,0(sp)
 2003400:	dec00204 	addi	sp,sp,8
 2003404:	f800283a 	ret

02003408 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2003408:	defffa04 	addi	sp,sp,-24
 200340c:	dfc00515 	stw	ra,20(sp)
 2003410:	df000415 	stw	fp,16(sp)
 2003414:	df000404 	addi	fp,sp,16
 2003418:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200341c:	00808034 	movhi	r2,512
 2003420:	1095f104 	addi	r2,r2,22468
 2003424:	10800017 	ldw	r2,0(r2)
 2003428:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200342c:	00003306 	br	20034fc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2003430:	e0bffd17 	ldw	r2,-12(fp)
 2003434:	11000217 	ldw	r4,8(r2)
 2003438:	20038800 	call	2003880 <strlen>
 200343c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2003440:	e0bffd17 	ldw	r2,-12(fp)
 2003444:	10c00217 	ldw	r3,8(r2)
 2003448:	e0bffc17 	ldw	r2,-16(fp)
 200344c:	1885883a 	add	r2,r3,r2
 2003450:	10bfffc4 	addi	r2,r2,-1
 2003454:	10800003 	ldbu	r2,0(r2)
 2003458:	10803fcc 	andi	r2,r2,255
 200345c:	1080201c 	xori	r2,r2,128
 2003460:	10bfe004 	addi	r2,r2,-128
 2003464:	10800bd8 	cmpnei	r2,r2,47
 2003468:	1000031e 	bne	r2,zero,2003478 <alt_find_file+0x70>
    {
      len -= 1;
 200346c:	e0bffc17 	ldw	r2,-16(fp)
 2003470:	10bfffc4 	addi	r2,r2,-1
 2003474:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2003478:	e0bffc17 	ldw	r2,-16(fp)
 200347c:	1007883a 	mov	r3,r2
 2003480:	e0bffe17 	ldw	r2,-8(fp)
 2003484:	1885883a 	add	r2,r3,r2
 2003488:	10800003 	ldbu	r2,0(r2)
 200348c:	10803fcc 	andi	r2,r2,255
 2003490:	1080201c 	xori	r2,r2,128
 2003494:	10bfe004 	addi	r2,r2,-128
 2003498:	10800be0 	cmpeqi	r2,r2,47
 200349c:	10000a1e 	bne	r2,zero,20034c8 <alt_find_file+0xc0>
 20034a0:	e0bffc17 	ldw	r2,-16(fp)
 20034a4:	1007883a 	mov	r3,r2
 20034a8:	e0bffe17 	ldw	r2,-8(fp)
 20034ac:	1885883a 	add	r2,r3,r2
 20034b0:	10800003 	ldbu	r2,0(r2)
 20034b4:	10803fcc 	andi	r2,r2,255
 20034b8:	1080201c 	xori	r2,r2,128
 20034bc:	10bfe004 	addi	r2,r2,-128
 20034c0:	1004c03a 	cmpne	r2,r2,zero
 20034c4:	10000a1e 	bne	r2,zero,20034f0 <alt_find_file+0xe8>
 20034c8:	e0bffd17 	ldw	r2,-12(fp)
 20034cc:	11000217 	ldw	r4,8(r2)
 20034d0:	e1bffc17 	ldw	r6,-16(fp)
 20034d4:	e17ffe17 	ldw	r5,-8(fp)
 20034d8:	20036d40 	call	20036d4 <memcmp>
 20034dc:	1004c03a 	cmpne	r2,r2,zero
 20034e0:	1000031e 	bne	r2,zero,20034f0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20034e4:	e0bffd17 	ldw	r2,-12(fp)
 20034e8:	e0bfff15 	stw	r2,-4(fp)
 20034ec:	00000806 	br	2003510 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 20034f0:	e0bffd17 	ldw	r2,-12(fp)
 20034f4:	10800017 	ldw	r2,0(r2)
 20034f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20034fc:	00c08034 	movhi	r3,512
 2003500:	18d5f104 	addi	r3,r3,22468
 2003504:	e0bffd17 	ldw	r2,-12(fp)
 2003508:	10ffc91e 	bne	r2,r3,2003430 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200350c:	e03fff15 	stw	zero,-4(fp)
 2003510:	e0bfff17 	ldw	r2,-4(fp)
}
 2003514:	e037883a 	mov	sp,fp
 2003518:	dfc00117 	ldw	ra,4(sp)
 200351c:	df000017 	ldw	fp,0(sp)
 2003520:	dec00204 	addi	sp,sp,8
 2003524:	f800283a 	ret

02003528 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2003528:	defffa04 	addi	sp,sp,-24
 200352c:	dfc00515 	stw	ra,20(sp)
 2003530:	df000415 	stw	fp,16(sp)
 2003534:	dc000315 	stw	r16,12(sp)
 2003538:	df000304 	addi	fp,sp,12
 200353c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2003540:	00bffa04 	movi	r2,-24
 2003544:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2003548:	e03ffe15 	stw	zero,-8(fp)
 200354c:	00002006 	br	20035d0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 2003550:	e13ffe17 	ldw	r4,-8(fp)
 2003554:	04008034 	movhi	r16,512
 2003558:	84148f04 	addi	r16,r16,21052
 200355c:	01400304 	movi	r5,12
 2003560:	2003d280 	call	2003d28 <__mulsi3>
 2003564:	1405883a 	add	r2,r2,r16
 2003568:	10800017 	ldw	r2,0(r2)
 200356c:	1004c03a 	cmpne	r2,r2,zero
 2003570:	1000141e 	bne	r2,zero,20035c4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 2003574:	e13ffe17 	ldw	r4,-8(fp)
 2003578:	04008034 	movhi	r16,512
 200357c:	84148f04 	addi	r16,r16,21052
 2003580:	01400304 	movi	r5,12
 2003584:	2003d280 	call	2003d28 <__mulsi3>
 2003588:	1407883a 	add	r3,r2,r16
 200358c:	e0bfff17 	ldw	r2,-4(fp)
 2003590:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2003594:	00808034 	movhi	r2,512
 2003598:	1095f504 	addi	r2,r2,22484
 200359c:	10c00017 	ldw	r3,0(r2)
 20035a0:	e0bffe17 	ldw	r2,-8(fp)
 20035a4:	1880040e 	bge	r3,r2,20035b8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 20035a8:	00c08034 	movhi	r3,512
 20035ac:	18d5f504 	addi	r3,r3,22484
 20035b0:	e0bffe17 	ldw	r2,-8(fp)
 20035b4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 20035b8:	e0bffe17 	ldw	r2,-8(fp)
 20035bc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 20035c0:	00000606 	br	20035dc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20035c4:	e0bffe17 	ldw	r2,-8(fp)
 20035c8:	10800044 	addi	r2,r2,1
 20035cc:	e0bffe15 	stw	r2,-8(fp)
 20035d0:	e0bffe17 	ldw	r2,-8(fp)
 20035d4:	10800810 	cmplti	r2,r2,32
 20035d8:	103fdd1e 	bne	r2,zero,2003550 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20035dc:	e0bffd17 	ldw	r2,-12(fp)
}
 20035e0:	e037883a 	mov	sp,fp
 20035e4:	dfc00217 	ldw	ra,8(sp)
 20035e8:	df000117 	ldw	fp,4(sp)
 20035ec:	dc000017 	ldw	r16,0(sp)
 20035f0:	dec00304 	addi	sp,sp,12
 20035f4:	f800283a 	ret

020035f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 20035f8:	defffb04 	addi	sp,sp,-20
 20035fc:	df000415 	stw	fp,16(sp)
 2003600:	df000404 	addi	fp,sp,16
 2003604:	e13ffe15 	stw	r4,-8(fp)
 2003608:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 200360c:	e0bfff17 	ldw	r2,-4(fp)
 2003610:	10840070 	cmpltui	r2,r2,4097
 2003614:	1000021e 	bne	r2,zero,2003620 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2003618:	00840004 	movi	r2,4096
 200361c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2003620:	e0fffe17 	ldw	r3,-8(fp)
 2003624:	e0bfff17 	ldw	r2,-4(fp)
 2003628:	1885883a 	add	r2,r3,r2
 200362c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2003630:	e0bffe17 	ldw	r2,-8(fp)
 2003634:	e0bffd15 	stw	r2,-12(fp)
 2003638:	00000506 	br	2003650 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 200363c:	e0bffd17 	ldw	r2,-12(fp)
 2003640:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2003644:	e0bffd17 	ldw	r2,-12(fp)
 2003648:	10800804 	addi	r2,r2,32
 200364c:	e0bffd15 	stw	r2,-12(fp)
 2003650:	e0fffd17 	ldw	r3,-12(fp)
 2003654:	e0bffc17 	ldw	r2,-16(fp)
 2003658:	18bff836 	bltu	r3,r2,200363c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 200365c:	e0bffe17 	ldw	r2,-8(fp)
 2003660:	108007cc 	andi	r2,r2,31
 2003664:	1005003a 	cmpeq	r2,r2,zero
 2003668:	1000021e 	bne	r2,zero,2003674 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 200366c:	e0bffd17 	ldw	r2,-12(fp)
 2003670:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2003674:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2003678:	e037883a 	mov	sp,fp
 200367c:	df000017 	ldw	fp,0(sp)
 2003680:	dec00104 	addi	sp,sp,4
 2003684:	f800283a 	ret

02003688 <atexit>:
 2003688:	200b883a 	mov	r5,r4
 200368c:	000d883a 	mov	r6,zero
 2003690:	0009883a 	mov	r4,zero
 2003694:	000f883a 	mov	r7,zero
 2003698:	20038f41 	jmpi	20038f4 <__register_exitproc>

0200369c <exit>:
 200369c:	defffe04 	addi	sp,sp,-8
 20036a0:	000b883a 	mov	r5,zero
 20036a4:	dc000015 	stw	r16,0(sp)
 20036a8:	dfc00115 	stw	ra,4(sp)
 20036ac:	2021883a 	mov	r16,r4
 20036b0:	2003a2c0 	call	2003a2c <__call_exitprocs>
 20036b4:	00808034 	movhi	r2,512
 20036b8:	1095fb04 	addi	r2,r2,22508
 20036bc:	11000017 	ldw	r4,0(r2)
 20036c0:	20800f17 	ldw	r2,60(r4)
 20036c4:	10000126 	beq	r2,zero,20036cc <exit+0x30>
 20036c8:	103ee83a 	callr	r2
 20036cc:	8009883a 	mov	r4,r16
 20036d0:	2003da00 	call	2003da0 <_exit>

020036d4 <memcmp>:
 20036d4:	00c000c4 	movi	r3,3
 20036d8:	1980032e 	bgeu	r3,r6,20036e8 <memcmp+0x14>
 20036dc:	2144b03a 	or	r2,r4,r5
 20036e0:	10c4703a 	and	r2,r2,r3
 20036e4:	10000f26 	beq	r2,zero,2003724 <memcmp+0x50>
 20036e8:	31ffffc4 	addi	r7,r6,-1
 20036ec:	3000061e 	bne	r6,zero,2003708 <memcmp+0x34>
 20036f0:	00000a06 	br	200371c <memcmp+0x48>
 20036f4:	39ffffc4 	addi	r7,r7,-1
 20036f8:	00bfffc4 	movi	r2,-1
 20036fc:	21000044 	addi	r4,r4,1
 2003700:	29400044 	addi	r5,r5,1
 2003704:	38800526 	beq	r7,r2,200371c <memcmp+0x48>
 2003708:	20c00003 	ldbu	r3,0(r4)
 200370c:	28800003 	ldbu	r2,0(r5)
 2003710:	18bff826 	beq	r3,r2,20036f4 <memcmp+0x20>
 2003714:	1885c83a 	sub	r2,r3,r2
 2003718:	f800283a 	ret
 200371c:	0005883a 	mov	r2,zero
 2003720:	f800283a 	ret
 2003724:	180f883a 	mov	r7,r3
 2003728:	20c00017 	ldw	r3,0(r4)
 200372c:	28800017 	ldw	r2,0(r5)
 2003730:	18bfed1e 	bne	r3,r2,20036e8 <memcmp+0x14>
 2003734:	31bfff04 	addi	r6,r6,-4
 2003738:	21000104 	addi	r4,r4,4
 200373c:	29400104 	addi	r5,r5,4
 2003740:	39bff936 	bltu	r7,r6,2003728 <memcmp+0x54>
 2003744:	003fe806 	br	20036e8 <memcmp+0x14>

02003748 <memcpy>:
 2003748:	01c003c4 	movi	r7,15
 200374c:	2007883a 	mov	r3,r4
 2003750:	3980032e 	bgeu	r7,r6,2003760 <memcpy+0x18>
 2003754:	2904b03a 	or	r2,r5,r4
 2003758:	108000cc 	andi	r2,r2,3
 200375c:	10000926 	beq	r2,zero,2003784 <memcpy+0x3c>
 2003760:	30000626 	beq	r6,zero,200377c <memcpy+0x34>
 2003764:	30cd883a 	add	r6,r6,r3
 2003768:	28800003 	ldbu	r2,0(r5)
 200376c:	29400044 	addi	r5,r5,1
 2003770:	18800005 	stb	r2,0(r3)
 2003774:	18c00044 	addi	r3,r3,1
 2003778:	30fffb1e 	bne	r6,r3,2003768 <memcpy+0x20>
 200377c:	2005883a 	mov	r2,r4
 2003780:	f800283a 	ret
 2003784:	3811883a 	mov	r8,r7
 2003788:	200f883a 	mov	r7,r4
 200378c:	28c00017 	ldw	r3,0(r5)
 2003790:	31bffc04 	addi	r6,r6,-16
 2003794:	38c00015 	stw	r3,0(r7)
 2003798:	28800117 	ldw	r2,4(r5)
 200379c:	38800115 	stw	r2,4(r7)
 20037a0:	28c00217 	ldw	r3,8(r5)
 20037a4:	38c00215 	stw	r3,8(r7)
 20037a8:	28800317 	ldw	r2,12(r5)
 20037ac:	29400404 	addi	r5,r5,16
 20037b0:	38800315 	stw	r2,12(r7)
 20037b4:	39c00404 	addi	r7,r7,16
 20037b8:	41bff436 	bltu	r8,r6,200378c <memcpy+0x44>
 20037bc:	008000c4 	movi	r2,3
 20037c0:	1180072e 	bgeu	r2,r6,20037e0 <memcpy+0x98>
 20037c4:	1007883a 	mov	r3,r2
 20037c8:	28800017 	ldw	r2,0(r5)
 20037cc:	31bfff04 	addi	r6,r6,-4
 20037d0:	29400104 	addi	r5,r5,4
 20037d4:	38800015 	stw	r2,0(r7)
 20037d8:	39c00104 	addi	r7,r7,4
 20037dc:	19bffa36 	bltu	r3,r6,20037c8 <memcpy+0x80>
 20037e0:	3807883a 	mov	r3,r7
 20037e4:	003fde06 	br	2003760 <memcpy+0x18>

020037e8 <memset>:
 20037e8:	008000c4 	movi	r2,3
 20037ec:	29403fcc 	andi	r5,r5,255
 20037f0:	2007883a 	mov	r3,r4
 20037f4:	1180022e 	bgeu	r2,r6,2003800 <memset+0x18>
 20037f8:	2084703a 	and	r2,r4,r2
 20037fc:	10000826 	beq	r2,zero,2003820 <memset+0x38>
 2003800:	30000526 	beq	r6,zero,2003818 <memset+0x30>
 2003804:	2805883a 	mov	r2,r5
 2003808:	30cd883a 	add	r6,r6,r3
 200380c:	18800005 	stb	r2,0(r3)
 2003810:	18c00044 	addi	r3,r3,1
 2003814:	19bffd1e 	bne	r3,r6,200380c <memset+0x24>
 2003818:	2005883a 	mov	r2,r4
 200381c:	f800283a 	ret
 2003820:	2804923a 	slli	r2,r5,8
 2003824:	020003c4 	movi	r8,15
 2003828:	200f883a 	mov	r7,r4
 200382c:	2884b03a 	or	r2,r5,r2
 2003830:	1006943a 	slli	r3,r2,16
 2003834:	10c6b03a 	or	r3,r2,r3
 2003838:	41800a2e 	bgeu	r8,r6,2003864 <memset+0x7c>
 200383c:	4005883a 	mov	r2,r8
 2003840:	31bffc04 	addi	r6,r6,-16
 2003844:	38c00015 	stw	r3,0(r7)
 2003848:	38c00115 	stw	r3,4(r7)
 200384c:	38c00215 	stw	r3,8(r7)
 2003850:	38c00315 	stw	r3,12(r7)
 2003854:	39c00404 	addi	r7,r7,16
 2003858:	11bff936 	bltu	r2,r6,2003840 <memset+0x58>
 200385c:	008000c4 	movi	r2,3
 2003860:	1180052e 	bgeu	r2,r6,2003878 <memset+0x90>
 2003864:	31bfff04 	addi	r6,r6,-4
 2003868:	008000c4 	movi	r2,3
 200386c:	38c00015 	stw	r3,0(r7)
 2003870:	39c00104 	addi	r7,r7,4
 2003874:	11bffb36 	bltu	r2,r6,2003864 <memset+0x7c>
 2003878:	3807883a 	mov	r3,r7
 200387c:	003fe006 	br	2003800 <memset+0x18>

02003880 <strlen>:
 2003880:	208000cc 	andi	r2,r4,3
 2003884:	2011883a 	mov	r8,r4
 2003888:	1000161e 	bne	r2,zero,20038e4 <strlen+0x64>
 200388c:	20c00017 	ldw	r3,0(r4)
 2003890:	017fbff4 	movhi	r5,65279
 2003894:	297fbfc4 	addi	r5,r5,-257
 2003898:	01e02074 	movhi	r7,32897
 200389c:	39e02004 	addi	r7,r7,-32640
 20038a0:	1945883a 	add	r2,r3,r5
 20038a4:	11c4703a 	and	r2,r2,r7
 20038a8:	00c6303a 	nor	r3,zero,r3
 20038ac:	1886703a 	and	r3,r3,r2
 20038b0:	18000c1e 	bne	r3,zero,20038e4 <strlen+0x64>
 20038b4:	280d883a 	mov	r6,r5
 20038b8:	380b883a 	mov	r5,r7
 20038bc:	21000104 	addi	r4,r4,4
 20038c0:	20800017 	ldw	r2,0(r4)
 20038c4:	1187883a 	add	r3,r2,r6
 20038c8:	1946703a 	and	r3,r3,r5
 20038cc:	0084303a 	nor	r2,zero,r2
 20038d0:	10c4703a 	and	r2,r2,r3
 20038d4:	103ff926 	beq	r2,zero,20038bc <strlen+0x3c>
 20038d8:	20800007 	ldb	r2,0(r4)
 20038dc:	10000326 	beq	r2,zero,20038ec <strlen+0x6c>
 20038e0:	21000044 	addi	r4,r4,1
 20038e4:	20800007 	ldb	r2,0(r4)
 20038e8:	103ffd1e 	bne	r2,zero,20038e0 <strlen+0x60>
 20038ec:	2205c83a 	sub	r2,r4,r8
 20038f0:	f800283a 	ret

020038f4 <__register_exitproc>:
 20038f4:	defffa04 	addi	sp,sp,-24
 20038f8:	00808034 	movhi	r2,512
 20038fc:	1095fb04 	addi	r2,r2,22508
 2003900:	dc000015 	stw	r16,0(sp)
 2003904:	14000017 	ldw	r16,0(r2)
 2003908:	dd000415 	stw	r20,16(sp)
 200390c:	2829883a 	mov	r20,r5
 2003910:	81405217 	ldw	r5,328(r16)
 2003914:	dcc00315 	stw	r19,12(sp)
 2003918:	dc800215 	stw	r18,8(sp)
 200391c:	dc400115 	stw	r17,4(sp)
 2003920:	dfc00515 	stw	ra,20(sp)
 2003924:	2023883a 	mov	r17,r4
 2003928:	3027883a 	mov	r19,r6
 200392c:	3825883a 	mov	r18,r7
 2003930:	28002526 	beq	r5,zero,20039c8 <__register_exitproc+0xd4>
 2003934:	29000117 	ldw	r4,4(r5)
 2003938:	008007c4 	movi	r2,31
 200393c:	11002716 	blt	r2,r4,20039dc <__register_exitproc+0xe8>
 2003940:	8800101e 	bne	r17,zero,2003984 <__register_exitproc+0x90>
 2003944:	2105883a 	add	r2,r4,r4
 2003948:	1085883a 	add	r2,r2,r2
 200394c:	20c00044 	addi	r3,r4,1
 2003950:	1145883a 	add	r2,r2,r5
 2003954:	0009883a 	mov	r4,zero
 2003958:	15000215 	stw	r20,8(r2)
 200395c:	28c00115 	stw	r3,4(r5)
 2003960:	2005883a 	mov	r2,r4
 2003964:	dfc00517 	ldw	ra,20(sp)
 2003968:	dd000417 	ldw	r20,16(sp)
 200396c:	dcc00317 	ldw	r19,12(sp)
 2003970:	dc800217 	ldw	r18,8(sp)
 2003974:	dc400117 	ldw	r17,4(sp)
 2003978:	dc000017 	ldw	r16,0(sp)
 200397c:	dec00604 	addi	sp,sp,24
 2003980:	f800283a 	ret
 2003984:	29802204 	addi	r6,r5,136
 2003988:	00800044 	movi	r2,1
 200398c:	110e983a 	sll	r7,r2,r4
 2003990:	30c04017 	ldw	r3,256(r6)
 2003994:	2105883a 	add	r2,r4,r4
 2003998:	1085883a 	add	r2,r2,r2
 200399c:	1185883a 	add	r2,r2,r6
 20039a0:	19c6b03a 	or	r3,r3,r7
 20039a4:	14802015 	stw	r18,128(r2)
 20039a8:	14c00015 	stw	r19,0(r2)
 20039ac:	00800084 	movi	r2,2
 20039b0:	30c04015 	stw	r3,256(r6)
 20039b4:	88bfe31e 	bne	r17,r2,2003944 <__register_exitproc+0x50>
 20039b8:	30804117 	ldw	r2,260(r6)
 20039bc:	11c4b03a 	or	r2,r2,r7
 20039c0:	30804115 	stw	r2,260(r6)
 20039c4:	003fdf06 	br	2003944 <__register_exitproc+0x50>
 20039c8:	00808034 	movhi	r2,512
 20039cc:	109c1f04 	addi	r2,r2,28796
 20039d0:	100b883a 	mov	r5,r2
 20039d4:	80805215 	stw	r2,328(r16)
 20039d8:	003fd606 	br	2003934 <__register_exitproc+0x40>
 20039dc:	00800034 	movhi	r2,0
 20039e0:	10800004 	addi	r2,r2,0
 20039e4:	1000021e 	bne	r2,zero,20039f0 <__register_exitproc+0xfc>
 20039e8:	013fffc4 	movi	r4,-1
 20039ec:	003fdc06 	br	2003960 <__register_exitproc+0x6c>
 20039f0:	01006404 	movi	r4,400
 20039f4:	103ee83a 	callr	r2
 20039f8:	1007883a 	mov	r3,r2
 20039fc:	103ffa26 	beq	r2,zero,20039e8 <__register_exitproc+0xf4>
 2003a00:	80805217 	ldw	r2,328(r16)
 2003a04:	180b883a 	mov	r5,r3
 2003a08:	18000115 	stw	zero,4(r3)
 2003a0c:	18800015 	stw	r2,0(r3)
 2003a10:	80c05215 	stw	r3,328(r16)
 2003a14:	18006215 	stw	zero,392(r3)
 2003a18:	18006315 	stw	zero,396(r3)
 2003a1c:	0009883a 	mov	r4,zero
 2003a20:	883fc826 	beq	r17,zero,2003944 <__register_exitproc+0x50>
 2003a24:	003fd706 	br	2003984 <__register_exitproc+0x90>

02003a28 <register_fini>:
 2003a28:	f800283a 	ret

02003a2c <__call_exitprocs>:
 2003a2c:	00808034 	movhi	r2,512
 2003a30:	1095fb04 	addi	r2,r2,22508
 2003a34:	10800017 	ldw	r2,0(r2)
 2003a38:	defff304 	addi	sp,sp,-52
 2003a3c:	df000b15 	stw	fp,44(sp)
 2003a40:	d8800115 	stw	r2,4(sp)
 2003a44:	00800034 	movhi	r2,0
 2003a48:	10800004 	addi	r2,r2,0
 2003a4c:	1005003a 	cmpeq	r2,r2,zero
 2003a50:	d8800215 	stw	r2,8(sp)
 2003a54:	d8800117 	ldw	r2,4(sp)
 2003a58:	dd400815 	stw	r21,32(sp)
 2003a5c:	dd000715 	stw	r20,28(sp)
 2003a60:	10805204 	addi	r2,r2,328
 2003a64:	dfc00c15 	stw	ra,48(sp)
 2003a68:	ddc00a15 	stw	r23,40(sp)
 2003a6c:	dd800915 	stw	r22,36(sp)
 2003a70:	dcc00615 	stw	r19,24(sp)
 2003a74:	dc800515 	stw	r18,20(sp)
 2003a78:	dc400415 	stw	r17,16(sp)
 2003a7c:	dc000315 	stw	r16,12(sp)
 2003a80:	282b883a 	mov	r21,r5
 2003a84:	2039883a 	mov	fp,r4
 2003a88:	d8800015 	stw	r2,0(sp)
 2003a8c:	2829003a 	cmpeq	r20,r5,zero
 2003a90:	d8800117 	ldw	r2,4(sp)
 2003a94:	14405217 	ldw	r17,328(r2)
 2003a98:	88001026 	beq	r17,zero,2003adc <__call_exitprocs+0xb0>
 2003a9c:	ddc00017 	ldw	r23,0(sp)
 2003aa0:	88800117 	ldw	r2,4(r17)
 2003aa4:	8c802204 	addi	r18,r17,136
 2003aa8:	143fffc4 	addi	r16,r2,-1
 2003aac:	80000916 	blt	r16,zero,2003ad4 <__call_exitprocs+0xa8>
 2003ab0:	05bfffc4 	movi	r22,-1
 2003ab4:	a000151e 	bne	r20,zero,2003b0c <__call_exitprocs+0xe0>
 2003ab8:	8409883a 	add	r4,r16,r16
 2003abc:	2105883a 	add	r2,r4,r4
 2003ac0:	1485883a 	add	r2,r2,r18
 2003ac4:	10c02017 	ldw	r3,128(r2)
 2003ac8:	a8c01126 	beq	r21,r3,2003b10 <__call_exitprocs+0xe4>
 2003acc:	843fffc4 	addi	r16,r16,-1
 2003ad0:	85bff81e 	bne	r16,r22,2003ab4 <__call_exitprocs+0x88>
 2003ad4:	d8800217 	ldw	r2,8(sp)
 2003ad8:	10003126 	beq	r2,zero,2003ba0 <__call_exitprocs+0x174>
 2003adc:	dfc00c17 	ldw	ra,48(sp)
 2003ae0:	df000b17 	ldw	fp,44(sp)
 2003ae4:	ddc00a17 	ldw	r23,40(sp)
 2003ae8:	dd800917 	ldw	r22,36(sp)
 2003aec:	dd400817 	ldw	r21,32(sp)
 2003af0:	dd000717 	ldw	r20,28(sp)
 2003af4:	dcc00617 	ldw	r19,24(sp)
 2003af8:	dc800517 	ldw	r18,20(sp)
 2003afc:	dc400417 	ldw	r17,16(sp)
 2003b00:	dc000317 	ldw	r16,12(sp)
 2003b04:	dec00d04 	addi	sp,sp,52
 2003b08:	f800283a 	ret
 2003b0c:	8409883a 	add	r4,r16,r16
 2003b10:	88c00117 	ldw	r3,4(r17)
 2003b14:	2105883a 	add	r2,r4,r4
 2003b18:	1445883a 	add	r2,r2,r17
 2003b1c:	18ffffc4 	addi	r3,r3,-1
 2003b20:	11800217 	ldw	r6,8(r2)
 2003b24:	1c001526 	beq	r3,r16,2003b7c <__call_exitprocs+0x150>
 2003b28:	10000215 	stw	zero,8(r2)
 2003b2c:	303fe726 	beq	r6,zero,2003acc <__call_exitprocs+0xa0>
 2003b30:	00c00044 	movi	r3,1
 2003b34:	1c06983a 	sll	r3,r3,r16
 2003b38:	90804017 	ldw	r2,256(r18)
 2003b3c:	8cc00117 	ldw	r19,4(r17)
 2003b40:	1884703a 	and	r2,r3,r2
 2003b44:	10001426 	beq	r2,zero,2003b98 <__call_exitprocs+0x16c>
 2003b48:	90804117 	ldw	r2,260(r18)
 2003b4c:	1884703a 	and	r2,r3,r2
 2003b50:	10000c1e 	bne	r2,zero,2003b84 <__call_exitprocs+0x158>
 2003b54:	2105883a 	add	r2,r4,r4
 2003b58:	1485883a 	add	r2,r2,r18
 2003b5c:	11400017 	ldw	r5,0(r2)
 2003b60:	e009883a 	mov	r4,fp
 2003b64:	303ee83a 	callr	r6
 2003b68:	88800117 	ldw	r2,4(r17)
 2003b6c:	98bfc81e 	bne	r19,r2,2003a90 <__call_exitprocs+0x64>
 2003b70:	b8800017 	ldw	r2,0(r23)
 2003b74:	147fd526 	beq	r2,r17,2003acc <__call_exitprocs+0xa0>
 2003b78:	003fc506 	br	2003a90 <__call_exitprocs+0x64>
 2003b7c:	8c000115 	stw	r16,4(r17)
 2003b80:	003fea06 	br	2003b2c <__call_exitprocs+0x100>
 2003b84:	2105883a 	add	r2,r4,r4
 2003b88:	1485883a 	add	r2,r2,r18
 2003b8c:	11000017 	ldw	r4,0(r2)
 2003b90:	303ee83a 	callr	r6
 2003b94:	003ff406 	br	2003b68 <__call_exitprocs+0x13c>
 2003b98:	303ee83a 	callr	r6
 2003b9c:	003ff206 	br	2003b68 <__call_exitprocs+0x13c>
 2003ba0:	88800117 	ldw	r2,4(r17)
 2003ba4:	1000081e 	bne	r2,zero,2003bc8 <__call_exitprocs+0x19c>
 2003ba8:	89000017 	ldw	r4,0(r17)
 2003bac:	20000726 	beq	r4,zero,2003bcc <__call_exitprocs+0x1a0>
 2003bb0:	b9000015 	stw	r4,0(r23)
 2003bb4:	8809883a 	mov	r4,r17
 2003bb8:	00000000 	call	0 <__alt_mem_sdram_0-0x2000000>
 2003bbc:	bc400017 	ldw	r17,0(r23)
 2003bc0:	883fb71e 	bne	r17,zero,2003aa0 <__call_exitprocs+0x74>
 2003bc4:	003fc506 	br	2003adc <__call_exitprocs+0xb0>
 2003bc8:	89000017 	ldw	r4,0(r17)
 2003bcc:	882f883a 	mov	r23,r17
 2003bd0:	2023883a 	mov	r17,r4
 2003bd4:	883fb21e 	bne	r17,zero,2003aa0 <__call_exitprocs+0x74>
 2003bd8:	003fc006 	br	2003adc <__call_exitprocs+0xb0>

02003bdc <udivmodsi4>:
 2003bdc:	29001b2e 	bgeu	r5,r4,2003c4c <udivmodsi4+0x70>
 2003be0:	28001a16 	blt	r5,zero,2003c4c <udivmodsi4+0x70>
 2003be4:	00800044 	movi	r2,1
 2003be8:	0007883a 	mov	r3,zero
 2003bec:	01c007c4 	movi	r7,31
 2003bf0:	00000306 	br	2003c00 <udivmodsi4+0x24>
 2003bf4:	19c01326 	beq	r3,r7,2003c44 <udivmodsi4+0x68>
 2003bf8:	18c00044 	addi	r3,r3,1
 2003bfc:	28000416 	blt	r5,zero,2003c10 <udivmodsi4+0x34>
 2003c00:	294b883a 	add	r5,r5,r5
 2003c04:	1085883a 	add	r2,r2,r2
 2003c08:	293ffa36 	bltu	r5,r4,2003bf4 <udivmodsi4+0x18>
 2003c0c:	10000d26 	beq	r2,zero,2003c44 <udivmodsi4+0x68>
 2003c10:	0007883a 	mov	r3,zero
 2003c14:	21400236 	bltu	r4,r5,2003c20 <udivmodsi4+0x44>
 2003c18:	2149c83a 	sub	r4,r4,r5
 2003c1c:	1886b03a 	or	r3,r3,r2
 2003c20:	1004d07a 	srli	r2,r2,1
 2003c24:	280ad07a 	srli	r5,r5,1
 2003c28:	103ffa1e 	bne	r2,zero,2003c14 <udivmodsi4+0x38>
 2003c2c:	30000226 	beq	r6,zero,2003c38 <udivmodsi4+0x5c>
 2003c30:	2005883a 	mov	r2,r4
 2003c34:	f800283a 	ret
 2003c38:	1809883a 	mov	r4,r3
 2003c3c:	2005883a 	mov	r2,r4
 2003c40:	f800283a 	ret
 2003c44:	0007883a 	mov	r3,zero
 2003c48:	003ff806 	br	2003c2c <udivmodsi4+0x50>
 2003c4c:	00800044 	movi	r2,1
 2003c50:	0007883a 	mov	r3,zero
 2003c54:	003fef06 	br	2003c14 <udivmodsi4+0x38>

02003c58 <__divsi3>:
 2003c58:	defffe04 	addi	sp,sp,-8
 2003c5c:	dc000015 	stw	r16,0(sp)
 2003c60:	dfc00115 	stw	ra,4(sp)
 2003c64:	0021883a 	mov	r16,zero
 2003c68:	20000c16 	blt	r4,zero,2003c9c <__divsi3+0x44>
 2003c6c:	000d883a 	mov	r6,zero
 2003c70:	28000e16 	blt	r5,zero,2003cac <__divsi3+0x54>
 2003c74:	2003bdc0 	call	2003bdc <udivmodsi4>
 2003c78:	1007883a 	mov	r3,r2
 2003c7c:	8005003a 	cmpeq	r2,r16,zero
 2003c80:	1000011e 	bne	r2,zero,2003c88 <__divsi3+0x30>
 2003c84:	00c7c83a 	sub	r3,zero,r3
 2003c88:	1805883a 	mov	r2,r3
 2003c8c:	dfc00117 	ldw	ra,4(sp)
 2003c90:	dc000017 	ldw	r16,0(sp)
 2003c94:	dec00204 	addi	sp,sp,8
 2003c98:	f800283a 	ret
 2003c9c:	0109c83a 	sub	r4,zero,r4
 2003ca0:	04000044 	movi	r16,1
 2003ca4:	000d883a 	mov	r6,zero
 2003ca8:	283ff20e 	bge	r5,zero,2003c74 <__divsi3+0x1c>
 2003cac:	014bc83a 	sub	r5,zero,r5
 2003cb0:	8021003a 	cmpeq	r16,r16,zero
 2003cb4:	003fef06 	br	2003c74 <__divsi3+0x1c>

02003cb8 <__modsi3>:
 2003cb8:	deffff04 	addi	sp,sp,-4
 2003cbc:	dfc00015 	stw	ra,0(sp)
 2003cc0:	01800044 	movi	r6,1
 2003cc4:	2807883a 	mov	r3,r5
 2003cc8:	20000416 	blt	r4,zero,2003cdc <__modsi3+0x24>
 2003ccc:	28000c16 	blt	r5,zero,2003d00 <__modsi3+0x48>
 2003cd0:	dfc00017 	ldw	ra,0(sp)
 2003cd4:	dec00104 	addi	sp,sp,4
 2003cd8:	2003bdc1 	jmpi	2003bdc <udivmodsi4>
 2003cdc:	0109c83a 	sub	r4,zero,r4
 2003ce0:	28000b16 	blt	r5,zero,2003d10 <__modsi3+0x58>
 2003ce4:	180b883a 	mov	r5,r3
 2003ce8:	01800044 	movi	r6,1
 2003cec:	2003bdc0 	call	2003bdc <udivmodsi4>
 2003cf0:	0085c83a 	sub	r2,zero,r2
 2003cf4:	dfc00017 	ldw	ra,0(sp)
 2003cf8:	dec00104 	addi	sp,sp,4
 2003cfc:	f800283a 	ret
 2003d00:	014bc83a 	sub	r5,zero,r5
 2003d04:	dfc00017 	ldw	ra,0(sp)
 2003d08:	dec00104 	addi	sp,sp,4
 2003d0c:	2003bdc1 	jmpi	2003bdc <udivmodsi4>
 2003d10:	0147c83a 	sub	r3,zero,r5
 2003d14:	003ff306 	br	2003ce4 <__modsi3+0x2c>

02003d18 <__udivsi3>:
 2003d18:	000d883a 	mov	r6,zero
 2003d1c:	2003bdc1 	jmpi	2003bdc <udivmodsi4>

02003d20 <__umodsi3>:
 2003d20:	01800044 	movi	r6,1
 2003d24:	2003bdc1 	jmpi	2003bdc <udivmodsi4>

02003d28 <__mulsi3>:
 2003d28:	20000a26 	beq	r4,zero,2003d54 <__mulsi3+0x2c>
 2003d2c:	0007883a 	mov	r3,zero
 2003d30:	2080004c 	andi	r2,r4,1
 2003d34:	1005003a 	cmpeq	r2,r2,zero
 2003d38:	2008d07a 	srli	r4,r4,1
 2003d3c:	1000011e 	bne	r2,zero,2003d44 <__mulsi3+0x1c>
 2003d40:	1947883a 	add	r3,r3,r5
 2003d44:	294b883a 	add	r5,r5,r5
 2003d48:	203ff91e 	bne	r4,zero,2003d30 <__mulsi3+0x8>
 2003d4c:	1805883a 	mov	r2,r3
 2003d50:	f800283a 	ret
 2003d54:	0007883a 	mov	r3,zero
 2003d58:	1805883a 	mov	r2,r3
 2003d5c:	f800283a 	ret

02003d60 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2003d60:	defffd04 	addi	sp,sp,-12
 2003d64:	df000215 	stw	fp,8(sp)
 2003d68:	df000204 	addi	fp,sp,8
 2003d6c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2003d70:	e0bfff17 	ldw	r2,-4(fp)
 2003d74:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2003d78:	e0bffe17 	ldw	r2,-8(fp)
 2003d7c:	1005003a 	cmpeq	r2,r2,zero
 2003d80:	1000021e 	bne	r2,zero,2003d8c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2003d84:	002af070 	cmpltui	zero,zero,43969
 2003d88:	00000106 	br	2003d90 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2003d8c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2003d90:	e037883a 	mov	sp,fp
 2003d94:	df000017 	ldw	fp,0(sp)
 2003d98:	dec00104 	addi	sp,sp,4
 2003d9c:	f800283a 	ret

02003da0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2003da0:	defffd04 	addi	sp,sp,-12
 2003da4:	dfc00215 	stw	ra,8(sp)
 2003da8:	df000115 	stw	fp,4(sp)
 2003dac:	df000104 	addi	fp,sp,4
 2003db0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2003db4:	e13fff17 	ldw	r4,-4(fp)
 2003db8:	2003d600 	call	2003d60 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2003dbc:	003fff06 	br	2003dbc <_exit+0x1c>
 2003dc0:	02003a28 	cmpgeui	r8,zero,232
